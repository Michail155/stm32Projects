
PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e0  080066e0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e8  080066e8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e8  080066e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080066f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  2000007c  0800676c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  0800676c  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011031  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c0  00000000  00000000  000310dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000337a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00034778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195b3  00000000  00000000  00035648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a52  00000000  00000000  0004ebfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f5e  00000000  00000000  0006264d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f35ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  000f35fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006258 	.word	0x08006258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08006258 	.word	0x08006258

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_ZL19ST7920_Send_commandh>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void ST7920_Send_command(uint8_t Data) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <_ZL19ST7920_Send_commandh+0x60>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	619a      	str	r2, [r3, #24]
	uint8_t tx_buffer = 0xF8; //Отправка команды. RW = 0/RS = 0
 80005a4:	23f8      	movs	r3, #248	; 0xf8
 80005a6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 80005a8:	f107 030f 	add.w	r3, r7, #15
 80005ac:	2201      	movs	r2, #1
 80005ae:	4619      	mov	r1, r3
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <_ZL19ST7920_Send_commandh+0x64>)
 80005b2:	f004 faa1 	bl	8004af8 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0;  //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f023 030f 	bic.w	r3, r3, #15
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 80005c0:	f107 030f 	add.w	r3, r7, #15
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <_ZL19ST7920_Send_commandh+0x64>)
 80005ca:	f004 fa95 	bl	8004af8 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 80005d6:	f107 030f 	add.w	r3, r7, #15
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <_ZL19ST7920_Send_commandh+0x64>)
 80005e0:	f004 fa8a 	bl	8004af8 <HAL_SPI_Transmit_IT>
	cs_reset();
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <_ZL19ST7920_Send_commandh+0x60>)
 80005e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005ea:	619a      	str	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020000 	.word	0x40020000
 80005f8:	20000580 	.word	0x20000580

080005fc <_ZL16ST7920_Send_datah>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
static void ST7920_Send_data(uint8_t Data) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных. DB0 - DB7.
	cs_set();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <_ZL16ST7920_Send_datah+0x60>)
 8000608:	2202      	movs	r2, #2
 800060a:	619a      	str	r2, [r3, #24]
	uint8_t tx_buffer = 0xFA; //Отправка данных. RW = 0/RS = 1
 800060c:	23fa      	movs	r3, #250	; 0xfa
 800060e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000610:	f107 030f 	add.w	r3, r7, #15
 8000614:	2201      	movs	r2, #1
 8000616:	4619      	mov	r1, r3
 8000618:	4811      	ldr	r0, [pc, #68]	; (8000660 <_ZL16ST7920_Send_datah+0x64>)
 800061a:	f004 fa6d 	bl	8004af8 <HAL_SPI_Transmit_IT>
	tx_buffer = Data & 0xF0; //Разбиваем 8 бит на 2 части. Передаем 7-4 бит.
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f023 030f 	bic.w	r3, r3, #15
 8000624:	b2db      	uxtb	r3, r3
 8000626:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 8000628:	f107 030f 	add.w	r3, r7, #15
 800062c:	2201      	movs	r2, #1
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <_ZL16ST7920_Send_datah+0x64>)
 8000632:	f004 fa61 	bl	8004af8 <HAL_SPI_Transmit_IT>
	tx_buffer = (Data << 4); //Разбиваем 8 бит на 2 части. Передаем оставшиеся 3-0 бит.
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	b2db      	uxtb	r3, r3
 800063c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit_IT(&hspi1, &tx_buffer, 1);
 800063e:	f107 030f 	add.w	r3, r7, #15
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <_ZL16ST7920_Send_datah+0x64>)
 8000648:	f004 fa56 	bl	8004af8 <HAL_SPI_Transmit_IT>
	cs_reset();
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <_ZL16ST7920_Send_datah+0x60>)
 800064e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000652:	619a      	str	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020000 	.word	0x40020000
 8000660:	20000580 	.word	0x20000580

08000664 <_Z11ST7920_Initv>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void ST7920_Init(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	RST_reset(); //Дернем ножку RST
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <_Z11ST7920_Initv+0x80>)
 800066c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000670:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f001 f860 	bl	8001738 <HAL_Delay>
	RST_set();
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <_Z11ST7920_Initv+0x80>)
 800067a:	2204      	movs	r2, #4
 800067c:	619a      	str	r2, [r3, #24]
	HAL_Delay(40); //Ждем 40 мс
 800067e:	2028      	movs	r0, #40	; 0x28
 8000680:	f001 f85a 	bl	8001738 <HAL_Delay>

	//Далее все согласно Datasheet://
	uint8_t tx_buffer = 0x30; //Function set
 8000684:	2330      	movs	r3, #48	; 0x30
 8000686:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff82 	bl	8000594 <_ZL19ST7920_Send_commandh>
	HAL_Delay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f001 f851 	bl	8001738 <HAL_Delay>
	ST7920_Send_command(tx_buffer);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff7b 	bl	8000594 <_ZL19ST7920_Send_commandh>
	HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f001 f84a 	bl	8001738 <HAL_Delay>
	tx_buffer = 0x0C; //D = 1, C = 0, B = 0.
 80006a4:	230c      	movs	r3, #12
 80006a6:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff72 	bl	8000594 <_ZL19ST7920_Send_commandh>
	HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 f841 	bl	8001738 <HAL_Delay>
	tx_buffer = 0x01;
 80006b6:	2301      	movs	r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Display Clean
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff69 	bl	8000594 <_ZL19ST7920_Send_commandh>
	HAL_Delay(12);
 80006c2:	200c      	movs	r0, #12
 80006c4:	f001 f838 	bl	8001738 <HAL_Delay>
	tx_buffer = 0x06;
 80006c8:	2306      	movs	r3, #6
 80006ca:	71fb      	strb	r3, [r7, #7]
	ST7920_Send_command(tx_buffer); //Cursor increment right no shift
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff60 	bl	8000594 <_ZL19ST7920_Send_commandh>
	HAL_Delay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 f82f 	bl	8001738 <HAL_Delay>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020000 	.word	0x40020000

080006e8 <_Z19ST7920_Graphic_modeb>:
}
/*----------------Функция вывода символьного текста на дисплей--------------------*/

/*----------------Функция включения/выключения графического режима----------------*/
void ST7920_Graphic_mode(bool enable)   // 1-enable, 0-disable
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	if (enable) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00c      	beq.n	8000712 <_Z19ST7920_Graphic_modeb+0x2a>
		ST7920_Send_command(0x34);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 1. Переходим в extended instruction.
 80006f8:	2034      	movs	r0, #52	; 0x34
 80006fa:	f7ff ff4b 	bl	8000594 <_ZL19ST7920_Send_commandh>
		HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f001 f81a 	bl	8001738 <HAL_Delay>
		ST7920_Send_command(0x36);  // Включаем графический режим
 8000704:	2036      	movs	r0, #54	; 0x36
 8000706:	f7ff ff45 	bl	8000594 <_ZL19ST7920_Send_commandh>
		HAL_Delay(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f001 f814 	bl	8001738 <HAL_Delay>

	else if (!enable) {
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
		HAL_Delay(1);
	}
}
 8000710:	e00b      	b.n	800072a <_Z19ST7920_Graphic_modeb+0x42>
	else if (!enable) {
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f083 0301 	eor.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d005      	beq.n	800072a <_Z19ST7920_Graphic_modeb+0x42>
		ST7920_Send_command(0x30);  // Т.к. работаем в 8мибитном режиме, то выбираем 0x30 + RE = 0. Переходим в basic instruction.
 800071e:	2030      	movs	r0, #48	; 0x30
 8000720:	f7ff ff38 	bl	8000594 <_ZL19ST7920_Send_commandh>
		HAL_Delay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f001 f807 	bl	8001738 <HAL_Delay>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <_Z12ST7920_Cleanv>:
/*----------------Функция включения/выключения графического режима----------------*/

/*---------------Функция очистки дисплея в графическом режиме--------------------*/
void ST7920_Clean() {
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
/// Функция очистки дисплея в графическом режиме
	uint8_t x, y;
	for (y = 0; y < 64; y++) {
 8000738:	2300      	movs	r3, #0
 800073a:	71bb      	strb	r3, [r7, #6]
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	2b3f      	cmp	r3, #63	; 0x3f
 8000740:	d82e      	bhi.n	80007a0 <_Z12ST7920_Cleanv+0x6e>
		if (y < 32) {
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b1f      	cmp	r3, #31
 8000746:	d80a      	bhi.n	800075e <_Z12ST7920_Cleanv+0x2c>
			ST7920_Send_command(0x80 | y);
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff1f 	bl	8000594 <_ZL19ST7920_Send_commandh>
			ST7920_Send_command(0x80);
 8000756:	2080      	movs	r0, #128	; 0x80
 8000758:	f7ff ff1c 	bl	8000594 <_ZL19ST7920_Send_commandh>
 800075c:	e00d      	b.n	800077a <_Z12ST7920_Cleanv+0x48>
		} else {
			ST7920_Send_command(0x80 | (y - 32));
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	3b20      	subs	r3, #32
 8000762:	b2db      	uxtb	r3, r3
 8000764:	b25b      	sxtb	r3, r3
 8000766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800076a:	b25b      	sxtb	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff10 	bl	8000594 <_ZL19ST7920_Send_commandh>
			ST7920_Send_command(0x88);
 8000774:	2088      	movs	r0, #136	; 0x88
 8000776:	f7ff ff0d 	bl	8000594 <_ZL19ST7920_Send_commandh>
		}
		for (x = 0; x < 8; x++) {
 800077a:	2300      	movs	r3, #0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b07      	cmp	r3, #7
 8000782:	d809      	bhi.n	8000798 <_Z12ST7920_Cleanv+0x66>
			ST7920_Send_data(0x00);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff39 	bl	80005fc <_ZL16ST7920_Send_datah>
			ST7920_Send_data(0x00);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff36 	bl	80005fc <_ZL16ST7920_Send_datah>
		for (x = 0; x < 8; x++) {
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	3301      	adds	r3, #1
 8000794:	71fb      	strb	r3, [r7, #7]
 8000796:	e7f2      	b.n	800077e <_Z12ST7920_Cleanv+0x4c>
	for (y = 0; y < 64; y++) {
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	3301      	adds	r3, #1
 800079c:	71bb      	strb	r3, [r7, #6]
 800079e:	e7cd      	b.n	800073c <_Z12ST7920_Cleanv+0xa>
		}
	}
	ST7920_Clean_Frame_buffer();
 80007a0:	f000 fa8a 	bl	8000cb8 <_Z25ST7920_Clean_Frame_bufferv>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_Z18ST7920_Draw_bitmapPKh>:
/*---------------Функция очистки дисплея в графическом режиме--------------------*/

/*-------------------Функция вывода изображения на экран дисплея--------------------------*/
void ST7920_Draw_bitmap(const unsigned char *bitmap) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
/// Функция вывода изображения на дисплей
/// Работает с памятью ST7920.
/// \param *bitmap - изображение 128*64. т.е. Буфер из 1024 элементов.
	uint8_t x, y;
	uint16_t i = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	81bb      	strh	r3, [r7, #12]
	uint8_t Temp, Db;

	for (y = 0; y < 64; y++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	73bb      	strb	r3, [r7, #14]
 80007bc:	7bbb      	ldrb	r3, [r7, #14]
 80007be:	2b3f      	cmp	r3, #63	; 0x3f
 80007c0:	f200 813c 	bhi.w	8000a3c <_Z18ST7920_Draw_bitmapPKh+0x290>
		for (x = 0; x < 8; x++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b07      	cmp	r3, #7
 80007cc:	f200 8132 	bhi.w	8000a34 <_Z18ST7920_Draw_bitmapPKh+0x288>
			if (y < 32) {
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	2b1f      	cmp	r3, #31
 80007d4:	d80e      	bhi.n	80007f4 <_Z18ST7920_Draw_bitmapPKh+0x48>
				ST7920_Send_command(0x80 | y);				//y(0-31)
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fed8 	bl	8000594 <_ZL19ST7920_Send_commandh>
				ST7920_Send_command(0x80 | x);				//x(0-8)
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fed1 	bl	8000594 <_ZL19ST7920_Send_commandh>
 80007f2:	e011      	b.n	8000818 <_Z18ST7920_Draw_bitmapPKh+0x6c>
			} else {
				ST7920_Send_command(0x80 | (y - 32));		//y(0-31)
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	3b20      	subs	r3, #32
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000800:	b25b      	sxtb	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fec5 	bl	8000594 <_ZL19ST7920_Send_commandh>
				ST7920_Send_command(0x88 | x);				//x(0-8)
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff febe 	bl	8000594 <_ZL19ST7920_Send_commandh>
			}

			i = ((y / 8) * 128) + (x * 16);
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	b2db      	uxtb	r3, r3
 800081e:	00da      	lsls	r2, r3, #3
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4413      	add	r3, r2
 8000824:	b29b      	uxth	r3, r3
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	81bb      	strh	r3, [r7, #12]
			Db = y % 8;
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	f003 0307 	and.w	r3, r3, #7
 8000830:	72fb      	strb	r3, [r7, #11]

			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8000832:	89bb      	ldrh	r3, [r7, #12]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	7afb      	ldrb	r3, [r7, #11]
 800083e:	fa42 f303 	asr.w	r3, r2, r3
 8000842:	01db      	lsls	r3, r3, #7
 8000844:	b25a      	sxtb	r2, r3
 8000846:	89bb      	ldrh	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	440b      	add	r3, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	fa41 f303 	asr.w	r3, r1, r3
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	b25b      	sxtb	r3, r3
 800085c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000860:	b25b      	sxtb	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b25a      	sxtb	r2, r3
 8000866:	89bb      	ldrh	r3, [r7, #12]
 8000868:	3302      	adds	r3, #2
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	440b      	add	r3, r1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	fa41 f303 	asr.w	r3, r1, r3
 8000878:	015b      	lsls	r3, r3, #5
 800087a:	b25b      	sxtb	r3, r3
 800087c:	f003 0320 	and.w	r3, r3, #32
 8000880:	b25b      	sxtb	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 3] >> Db) & 0x01) << 4) | (((bitmap[i + 4] >> Db) & 0x01) << 3) | (((bitmap[i + 5] >> Db) & 0x01) << 2)
 8000886:	89bb      	ldrh	r3, [r7, #12]
 8000888:	3303      	adds	r3, #3
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	440b      	add	r3, r1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	fa41 f303 	asr.w	r3, r1, r3
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	b25b      	sxtb	r3, r3
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	89bb      	ldrh	r3, [r7, #12]
 80008a8:	3304      	adds	r3, #4
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	440b      	add	r3, r1
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	7afb      	ldrb	r3, [r7, #11]
 80008b4:	fa41 f303 	asr.w	r3, r1, r3
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	89bb      	ldrh	r3, [r7, #12]
 80008c8:	3305      	adds	r3, #5
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	440b      	add	r3, r1
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	fa41 f303 	asr.w	r3, r1, r3
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 6] >> Db) & 0x01) << 1) | (((bitmap[i + 7] >> Db) & 0x01) << 0);
 80008e6:	89bb      	ldrh	r3, [r7, #12]
 80008e8:	3306      	adds	r3, #6
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	440b      	add	r3, r1
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	7afb      	ldrb	r3, [r7, #11]
 80008f4:	fa41 f303 	asr.w	r3, r1, r3
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	b25b      	sxtb	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b25a      	sxtb	r2, r3
 8000906:	89bb      	ldrh	r3, [r7, #12]
 8000908:	3307      	adds	r3, #7
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	440b      	add	r3, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	7afb      	ldrb	r3, [r7, #11]
 8000914:	fa41 f303 	asr.w	r3, r1, r3
 8000918:	b25b      	sxtb	r3, r3
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	b25b      	sxtb	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i] >> Db) & 0x01) << 7) | (((bitmap[i + 1] >> Db) & 0x01) << 6) | (((bitmap[i + 2] >> Db) & 0x01) << 5)
 8000924:	72bb      	strb	r3, [r7, #10]
			ST7920_Send_data(Temp);
 8000926:	7abb      	ldrb	r3, [r7, #10]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe67 	bl	80005fc <_ZL16ST7920_Send_datah>

			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 800092e:	89bb      	ldrh	r3, [r7, #12]
 8000930:	3308      	adds	r3, #8
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	fa42 f303 	asr.w	r3, r2, r3
 8000940:	01db      	lsls	r3, r3, #7
 8000942:	b25a      	sxtb	r2, r3
 8000944:	89bb      	ldrh	r3, [r7, #12]
 8000946:	3309      	adds	r3, #9
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	440b      	add	r3, r1
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4619      	mov	r1, r3
 8000950:	7afb      	ldrb	r3, [r7, #11]
 8000952:	fa41 f303 	asr.w	r3, r1, r3
 8000956:	019b      	lsls	r3, r3, #6
 8000958:	b25b      	sxtb	r3, r3
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	b25b      	sxtb	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b25a      	sxtb	r2, r3
 8000964:	89bb      	ldrh	r3, [r7, #12]
 8000966:	330a      	adds	r3, #10
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	440b      	add	r3, r1
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	7afb      	ldrb	r3, [r7, #11]
 8000972:	fa41 f303 	asr.w	r3, r1, r3
 8000976:	015b      	lsls	r3, r3, #5
 8000978:	b25b      	sxtb	r3, r3
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	b25b      	sxtb	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 11] >> Db) & 0x01) << 4) | (((bitmap[i + 12] >> Db) & 0x01) << 3) | (((bitmap[i + 13] >> Db) & 0x01) << 2)
 8000984:	89bb      	ldrh	r3, [r7, #12]
 8000986:	330b      	adds	r3, #11
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	440b      	add	r3, r1
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	7afb      	ldrb	r3, [r7, #11]
 8000992:	fa41 f303 	asr.w	r3, r1, r3
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	b25b      	sxtb	r3, r3
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b25a      	sxtb	r2, r3
 80009a4:	89bb      	ldrh	r3, [r7, #12]
 80009a6:	330c      	adds	r3, #12
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	440b      	add	r3, r1
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	7afb      	ldrb	r3, [r7, #11]
 80009b2:	fa41 f303 	asr.w	r3, r1, r3
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	89bb      	ldrh	r3, [r7, #12]
 80009c6:	330d      	adds	r3, #13
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	440b      	add	r3, r1
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	4619      	mov	r1, r3
 80009d0:	7afb      	ldrb	r3, [r7, #11]
 80009d2:	fa41 f303 	asr.w	r3, r1, r3
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	b25b      	sxtb	r3, r3
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b25a      	sxtb	r2, r3
					| (((bitmap[i + 14] >> Db) & 0x01) << 1) | (((bitmap[i + 15] >> Db) & 0x01) << 0);
 80009e4:	89bb      	ldrh	r3, [r7, #12]
 80009e6:	330e      	adds	r3, #14
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	440b      	add	r3, r1
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	fa41 f303 	asr.w	r3, r1, r3
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25a      	sxtb	r2, r3
 8000a04:	89bb      	ldrh	r3, [r7, #12]
 8000a06:	330f      	adds	r3, #15
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	fa41 f303 	asr.w	r3, r1, r3
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	b25b      	sxtb	r3, r3
			Temp = (((bitmap[i + 8] >> Db) & 0x01) << 7) | (((bitmap[i + 9] >> Db) & 0x01) << 6) | (((bitmap[i + 10] >> Db) & 0x01) << 5)
 8000a22:	72bb      	strb	r3, [r7, #10]

			ST7920_Send_data(Temp);
 8000a24:	7abb      	ldrb	r3, [r7, #10]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fde8 	bl	80005fc <_ZL16ST7920_Send_datah>
		for (x = 0; x < 8; x++) {
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	e6c9      	b.n	80007c8 <_Z18ST7920_Draw_bitmapPKh+0x1c>
	for (y = 0; y < 64; y++) {
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	3301      	adds	r3, #1
 8000a38:	73bb      	strb	r3, [r7, #14]
 8000a3a:	e6bf      	b.n	80007bc <_Z18ST7920_Draw_bitmapPKh+0x10>
		}
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_Z13ST7920_Updatev>:
	}
}
/*---------------------Функция удаления пикселя на экране----------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void ST7920_Update(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	/// Функция вывода буфера кадра на дисплей
	/// Подготовьте буфер кадра, перед тем, как обновить изображение
	ST7920_Draw_bitmap(Frame_buffer);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <_Z13ST7920_Updatev+0x10>)
 8000a4a:	f7ff feaf 	bl	80007ac <_Z18ST7920_Draw_bitmapPKh>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000118 	.word	0x20000118

08000a58 <_Z12print_symbolttb>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void print_symbol(uint16_t x, uint16_t symbol, bool inversion) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
 8000a62:	460b      	mov	r3, r1
 8000a64:	80bb      	strh	r3, [r7, #4]
 8000a66:	4613      	mov	r3, r2
 8000a68:	70fb      	strb	r3, [r7, #3]
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
/// \param symbol - код символа
/// \param inversion - инверсия. 1 - вкл, 0 - выкл.
	for (int i = 0; i <= 6; i++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b06      	cmp	r3, #6
 8000a72:	dc29      	bgt.n	8000ac8 <_Z12print_symbolttb+0x70>
		if (inversion) {
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d012      	beq.n	8000aa0 <_Z12print_symbolttb+0x48>
			Frame_buffer[i + x - 1] = ~Font[(symbol * 6) + i];
 8000a7a:	88ba      	ldrh	r2, [r7, #4]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_Z12print_symbolttb+0x7c>)
 8000a8c:	5cd2      	ldrb	r2, [r2, r3]
 8000a8e:	88f9      	ldrh	r1, [r7, #6]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	440b      	add	r3, r1
 8000a94:	3b01      	subs	r3, #1
 8000a96:	43d2      	mvns	r2, r2
 8000a98:	b2d1      	uxtb	r1, r2
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <_Z12print_symbolttb+0x80>)
 8000a9c:	54d1      	strb	r1, [r2, r3]
 8000a9e:	e00f      	b.n	8000ac0 <_Z12print_symbolttb+0x68>
		} else {
			Frame_buffer[i + x - 1] = Font[(symbol * 6) + i];
 8000aa0:	88ba      	ldrh	r2, [r7, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	441a      	add	r2, r3
 8000ab0:	88f9      	ldrh	r1, [r7, #6]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	440b      	add	r3, r1
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	4906      	ldr	r1, [pc, #24]	; (8000ad4 <_Z12print_symbolttb+0x7c>)
 8000aba:	5c89      	ldrb	r1, [r1, r2]
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <_Z12print_symbolttb+0x80>)
 8000abe:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i <= 6; i++) {
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e7d2      	b.n	8000a6e <_Z12print_symbolttb+0x16>
		}

	}
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	080062c8 	.word	0x080062c8
 8000ad8:	20000118 	.word	0x20000118

08000adc <_Z18ST7920_Decode_UTF8thbPc>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/

void ST7920_Decode_UTF8(uint16_t x, uint8_t y, bool inversion, char *tx_buffer) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	717b      	strb	r3, [r7, #5]
 8000aec:	4613      	mov	r3, r2
 8000aee:	713b      	strb	r3, [r7, #4]
/// 4 строка: x = 384;
/// 5 строка: x = 512;
/// 6 строка: x = 640;
/// 7 строка: x = 786;
/// 8 строка: x = 896;
	x = x + y * 128;
 8000af0:	797b      	ldrb	r3, [r7, #5]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	01db      	lsls	r3, r3, #7
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	4413      	add	r3, r2
 8000afc:	80fb      	strh	r3, [r7, #6]
	uint16_t symbol = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f7ff fb68 	bl	80001e0 <strlen>
 8000b10:	4602      	mov	r2, r0
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	f240 80ca 	bls.w	8000cae <_Z18ST7920_Decode_UTF8thbPc+0x1d2>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2bbf      	cmp	r3, #191	; 0xbf
 8000b24:	d822      	bhi.n	8000b6c <_Z18ST7920_Decode_UTF8thbPc+0x90>
			if (flag_block) {
 8000b26:	7dfb      	ldrb	r3, [r7, #23]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <_Z18ST7920_Decode_UTF8thbPc+0x56>
				flag_block = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	75fb      	strb	r3, [r7, #23]
 8000b30:	e0b9      	b.n	8000ca6 <_Z18ST7920_Decode_UTF8thbPc+0x1ca>
			} else {
				symbol = tx_buffer[i];
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	81fb      	strh	r3, [r7, #14]
				if (inversion) {
 8000b3c:	793b      	ldrb	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d008      	beq.n	8000b54 <_Z18ST7920_Decode_UTF8thbPc+0x78>
					print_symbol(x, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8000b42:	89fb      	ldrh	r3, [r7, #14]
 8000b44:	3b20      	subs	r3, #32
 8000b46:	b299      	uxth	r1, r3
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff83 	bl	8000a58 <_Z12print_symbolttb>
 8000b52:	e007      	b.n	8000b64 <_Z18ST7920_Decode_UTF8thbPc+0x88>
				} else {
					print_symbol(x, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	3b20      	subs	r3, #32
 8000b58:	b299      	uxth	r1, r3
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff7a 	bl	8000a58 <_Z12print_symbolttb>
				}
				x = x + 6;
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	3306      	adds	r3, #6
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	e09c      	b.n	8000ca6 <_Z18ST7920_Decode_UTF8thbPc+0x1ca>
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	6839      	ldr	r1, [r7, #0]
 8000b7e:	440b      	add	r3, r1
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d820      	bhi.n	8000bd6 <_Z18ST7920_Decode_UTF8thbPc+0xfa>
 8000b94:	89fb      	ldrh	r3, [r7, #14]
 8000b96:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d91b      	bls.n	8000bd6 <_Z18ST7920_Decode_UTF8thbPc+0xfa>
				if (inversion) {
 8000b9e:	793b      	ldrb	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00a      	beq.n	8000bba <_Z18ST7920_Decode_UTF8thbPc+0xde>
					print_symbol(x, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000baa:	330f      	adds	r3, #15
 8000bac:	b299      	uxth	r1, r3
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff50 	bl	8000a58 <_Z12print_symbolttb>
 8000bb8:	e009      	b.n	8000bce <_Z18ST7920_Decode_UTF8thbPc+0xf2>
				} else {
					print_symbol(x, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8000bba:	89fb      	ldrh	r3, [r7, #14]
 8000bbc:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000bc0:	330f      	adds	r3, #15
 8000bc2:	b299      	uxth	r1, r3
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff45 	bl	8000a58 <_Z12print_symbolttb>
				}
				x = x + 6;
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	3306      	adds	r3, #6
 8000bd2:	80fb      	strh	r3, [r7, #6]
 8000bd4:	e065      	b.n	8000ca2 <_Z18ST7920_Decode_UTF8thbPc+0x1c6>
			} else if (symbol == 0xD081) {
 8000bd6:	89fb      	ldrh	r3, [r7, #14]
 8000bd8:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d113      	bne.n	8000c08 <_Z18ST7920_Decode_UTF8thbPc+0x12c>
				if (inversion) {
 8000be0:	793b      	ldrb	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d006      	beq.n	8000bf4 <_Z18ST7920_Decode_UTF8thbPc+0x118>
					print_symbol(x, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2201      	movs	r2, #1
 8000bea:	219f      	movs	r1, #159	; 0x9f
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff33 	bl	8000a58 <_Z12print_symbolttb>
 8000bf2:	e005      	b.n	8000c00 <_Z18ST7920_Decode_UTF8thbPc+0x124>
				} else {
					print_symbol(x, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	219f      	movs	r1, #159	; 0x9f
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff2c 	bl	8000a58 <_Z12print_symbolttb>
				}
				x = x + 6;
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	3306      	adds	r3, #6
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	e04c      	b.n	8000ca2 <_Z18ST7920_Decode_UTF8thbPc+0x1c6>
			} else if (symbol == 0xD191) {
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	f24d 1291 	movw	r2, #53649	; 0xd191
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d113      	bne.n	8000c3a <_Z18ST7920_Decode_UTF8thbPc+0x15e>
				if (inversion) {
 8000c12:	793b      	ldrb	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <_Z18ST7920_Decode_UTF8thbPc+0x14a>
					print_symbol(x, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	21a0      	movs	r1, #160	; 0xa0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff1a 	bl	8000a58 <_Z12print_symbolttb>
 8000c24:	e005      	b.n	8000c32 <_Z18ST7920_Decode_UTF8thbPc+0x156>
				} else {
					print_symbol(x, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	21a0      	movs	r1, #160	; 0xa0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff13 	bl	8000a58 <_Z12print_symbolttb>
				}
				x = x + 6;
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	3306      	adds	r3, #6
 8000c36:	80fb      	strh	r3, [r7, #6]
 8000c38:	e033      	b.n	8000ca2 <_Z18ST7920_Decode_UTF8thbPc+0x1c6>
			} else if (symbol == 0xC2B0) {
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d113      	bne.n	8000c6c <_Z18ST7920_Decode_UTF8thbPc+0x190>
				if (inversion) {
 8000c44:	793b      	ldrb	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d006      	beq.n	8000c58 <_Z18ST7920_Decode_UTF8thbPc+0x17c>
					print_symbol(x, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	21a1      	movs	r1, #161	; 0xa1
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff01 	bl	8000a58 <_Z12print_symbolttb>
 8000c56:	e005      	b.n	8000c64 <_Z18ST7920_Decode_UTF8thbPc+0x188>
				} else {
					print_symbol(x, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	21a1      	movs	r1, #161	; 0xa1
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fefa 	bl	8000a58 <_Z12print_symbolttb>
				}
				x = x + 6;
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	3306      	adds	r3, #6
 8000c68:	80fb      	strh	r3, [r7, #6]
 8000c6a:	e01a      	b.n	8000ca2 <_Z18ST7920_Decode_UTF8thbPc+0x1c6>
			}

			else {
				if (inversion) {
 8000c6c:	793b      	ldrb	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00a      	beq.n	8000c88 <_Z18ST7920_Decode_UTF8thbPc+0x1ac>
					print_symbol(x, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000c78:	330f      	adds	r3, #15
 8000c7a:	b299      	uxth	r1, r3
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fee9 	bl	8000a58 <_Z12print_symbolttb>
 8000c86:	e009      	b.n	8000c9c <_Z18ST7920_Decode_UTF8thbPc+0x1c0>
				} else {
					print_symbol(x, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8000c88:	89fb      	ldrh	r3, [r7, #14]
 8000c8a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000c8e:	330f      	adds	r3, #15
 8000c90:	b299      	uxth	r1, r3
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	2200      	movs	r2, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fede 	bl	8000a58 <_Z12print_symbolttb>
				}
				x = x + 6;
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	3306      	adds	r3, #6
 8000ca0:	80fb      	strh	r3, [r7, #6]
			}
			flag_block = 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	e72d      	b.n	8000b0a <_Z18ST7920_Decode_UTF8thbPc+0x2e>
		}
	}
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <_Z25ST7920_Clean_Frame_bufferv>:
	}
}
/*---------------------Функция инверсии любого места в буфере------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void ST7920_Clean_Frame_buffer(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 8000cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4802      	ldr	r0, [pc, #8]	; (8000ccc <_Z25ST7920_Clean_Frame_bufferv+0x14>)
 8000cc4:	f004 fe52 	bl	800596c <memset>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000118 	.word	0x20000118

08000cd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a39      	ldr	r2, [pc, #228]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a32      	ldr	r2, [pc, #200]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a2b      	ldr	r2, [pc, #172]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a24      	ldr	r2, [pc, #144]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_GPIO_Init+0x104>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5c:	481e      	ldr	r0, [pc, #120]	; (8000dd8 <MX_GPIO_Init+0x108>)
 8000d5e:	f000 ffd5 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2106      	movs	r1, #6
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000d68:	f000 ffd0 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2120      	movs	r1, #32
 8000d70:	481b      	ldr	r0, [pc, #108]	; (8000de0 <MX_GPIO_Init+0x110>)
 8000d72:	f000 ffcb 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <MX_GPIO_Init+0x108>)
 8000d90:	f000 fe38 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 8000d94:	2306      	movs	r3, #6
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000dac:	f000 fe2a 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000db0:	2320      	movs	r3, #32
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_GPIO_Init+0x110>)
 8000dc8:	f000 fe1c 	bl	8001a04 <HAL_GPIO_Init>

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400

08000de4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <MX_I2C1_Init+0x54>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_I2C1_Init+0x58>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e22:	f000 ffa7 	bl	8001d74 <HAL_I2C_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e2c:	f000 fa28 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000518 	.word	0x20000518
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	000186a0 	.word	0x000186a0

08000e40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <HAL_I2C_MspInit+0xa4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d13b      	bne.n	8000eda <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_I2C_MspInit+0xa8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <HAL_I2C_MspInit+0xa8>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_I2C_MspInit+0xa8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e7e:	23c0      	movs	r3, #192	; 0xc0
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e82:	2312      	movs	r3, #18
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4814      	ldr	r0, [pc, #80]	; (8000eec <HAL_I2C_MspInit+0xac>)
 8000e9a:	f000 fdb3 	bl	8001a04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_I2C_MspInit+0xa8>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_I2C_MspInit+0xa8>)
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_I2C_MspInit+0xa8>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	201f      	movs	r0, #31
 8000ec0:	f000 fd39 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ec4:	201f      	movs	r0, #31
 8000ec6:	f000 fd52 	bl	800196e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2020      	movs	r0, #32
 8000ed0:	f000 fd31 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ed4:	2020      	movs	r0, #32
 8000ed6:	f000 fd4a 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fbad 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f94f 	bl	800119c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f7ff fee7 	bl	8000cd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f02:	f000 f9c3 	bl	800128c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f06:	f000 fb09 	bl	800151c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f0a:	f7ff ff6b 	bl	8000de4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000f0e:	2064      	movs	r0, #100	; 0x64
 8000f10:	f000 fc12 	bl	8001738 <HAL_Delay>
  ST7920_Init();
 8000f14:	f7ff fba6 	bl	8000664 <_Z11ST7920_Initv>
  ST7920_Graphic_mode(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff fbe5 	bl	80006e8 <_Z19ST7920_Graphic_modeb>
  HAL_Delay(100);
 8000f1e:	2064      	movs	r0, #100	; 0x64
 8000f20:	f000 fc0a 	bl	8001738 <HAL_Delay>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);

  	  HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (ENABLE_ADDR|COMAND_BIT), 1, &PON, 1,1000);
 8000f24:	4b87      	ldr	r3, [pc, #540]	; (8001144 <main+0x254>)
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	4b87      	ldr	r3, [pc, #540]	; (8001148 <main+0x258>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	4b83      	ldr	r3, [pc, #524]	; (800114c <main+0x25c>)
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	2152      	movs	r1, #82	; 0x52
 8000f44:	4882      	ldr	r0, [pc, #520]	; (8001150 <main+0x260>)
 8000f46:	f001 f859 	bl	8001ffc <HAL_I2C_Mem_Write>
  	  HAL_Delay(10);
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	f000 fbf4 	bl	8001738 <HAL_Delay>
      uint8_t K = (PON|AEN);
 8000f50:	4b7e      	ldr	r3, [pc, #504]	; (800114c <main+0x25c>)
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	4b7f      	ldr	r3, [pc, #508]	; (8001154 <main+0x264>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	717b      	strb	r3, [r7, #5]
      HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (ENABLE_ADDR|COMAND_BIT), 1, &K, 1,1000);
 8000f5e:	4b79      	ldr	r3, [pc, #484]	; (8001144 <main+0x254>)
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	4b79      	ldr	r3, [pc, #484]	; (8001148 <main+0x258>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	1d7b      	adds	r3, r7, #5
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2152      	movs	r1, #82	; 0x52
 8000f7e:	4874      	ldr	r0, [pc, #464]	; (8001150 <main+0x260>)
 8000f80:	f001 f83c 	bl	8001ffc <HAL_I2C_Mem_Write>
      HAL_Delay(50);
 8000f84:	2032      	movs	r0, #50	; 0x32
 8000f86:	f000 fbd7 	bl	8001738 <HAL_Delay>
      HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (A_TIM_ADDR|COMAND_BIT), 1, &A_TIM_VALUE154, 1,1000);
 8000f8a:	4b73      	ldr	r3, [pc, #460]	; (8001158 <main+0x268>)
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <main+0x258>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	4b6e      	ldr	r3, [pc, #440]	; (800115c <main+0x26c>)
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2152      	movs	r1, #82	; 0x52
 8000faa:	4869      	ldr	r0, [pc, #420]	; (8001150 <main+0x260>)
 8000fac:	f001 f826 	bl	8001ffc <HAL_I2C_Mem_Write>
      HAL_Delay(50);
 8000fb0:	2032      	movs	r0, #50	; 0x32
 8000fb2:	f000 fbc1 	bl	8001738 <HAL_Delay>
      uint16_t Red = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	81fb      	strh	r3, [r7, #14]
      uint16_t Green = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	81bb      	strh	r3, [r7, #12]
      uint16_t Blue = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	817b      	strh	r3, [r7, #10]
      uint16_t White = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	813b      	strh	r3, [r7, #8]

      uint16_t K1 = 23;
 8000fc6:	2317      	movs	r3, #23
 8000fc8:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ST7920_Clean();
 8000fca:	f7ff fbb2 	bl	8000732 <_Z12ST7920_Cleanv>
	  ST7920_Clean_Frame_buffer();
 8000fce:	f7ff fe73 	bl	8000cb8 <_Z25ST7920_Clean_Frame_bufferv>

      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, RED_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferRed, 2);
 8000fd2:	4b63      	ldr	r3, [pc, #396]	; (8001160 <main+0x270>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	4b63      	ldr	r3, [pc, #396]	; (8001164 <main+0x274>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	4b60      	ldr	r3, [pc, #384]	; (8001168 <main+0x278>)
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2152      	movs	r1, #82	; 0x52
 8000fec:	4858      	ldr	r0, [pc, #352]	; (8001150 <main+0x260>)
 8000fee:	f001 f8ff 	bl	80021f0 <HAL_I2C_Mem_Read_IT>
      HAL_Delay(10);
 8000ff2:	200a      	movs	r0, #10
 8000ff4:	f000 fba0 	bl	8001738 <HAL_Delay>
      Red = (((uint16_t)(RxBufferRed[1]<<8))|(uint16_t)RxBufferRed[0])/K1;
 8000ff8:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <main+0x278>)
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b29b      	uxth	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	4b58      	ldr	r3, [pc, #352]	; (8001168 <main+0x278>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	431a      	orrs	r2, r3
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001010:	81fb      	strh	r3, [r7, #14]
	  sprintf(tx_buffer,"Красный:%ld",Red);
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	461a      	mov	r2, r3
 8001016:	4955      	ldr	r1, [pc, #340]	; (800116c <main+0x27c>)
 8001018:	4855      	ldr	r0, [pc, #340]	; (8001170 <main+0x280>)
 800101a:	f004 fcaf 	bl	800597c <siprintf>
	  ST7920_Decode_UTF8(0, 0, 0, tx_buffer);
 800101e:	4b54      	ldr	r3, [pc, #336]	; (8001170 <main+0x280>)
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fd59 	bl	8000adc <_Z18ST7920_Decode_UTF8thbPc>

      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, GREEN_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferGreen, 2);
 800102a:	4b52      	ldr	r3, [pc, #328]	; (8001174 <main+0x284>)
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <main+0x274>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4313      	orrs	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	2302      	movs	r3, #2
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <main+0x288>)
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2152      	movs	r1, #82	; 0x52
 8001044:	4842      	ldr	r0, [pc, #264]	; (8001150 <main+0x260>)
 8001046:	f001 f8d3 	bl	80021f0 <HAL_I2C_Mem_Read_IT>
      HAL_Delay(10);
 800104a:	200a      	movs	r0, #10
 800104c:	f000 fb74 	bl	8001738 <HAL_Delay>
      Green = (((uint16_t)(RxBufferGreen[1]<<8))|(uint16_t)RxBufferGreen[0])/K1;
 8001050:	4b49      	ldr	r3, [pc, #292]	; (8001178 <main+0x288>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	b29b      	uxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	4b46      	ldr	r3, [pc, #280]	; (8001178 <main+0x288>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	431a      	orrs	r2, r3
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	fb92 f3f3 	sdiv	r3, r2, r3
 8001068:	81bb      	strh	r3, [r7, #12]
	  sprintf(tx_buffer,"Зеленый:%ld",Green);
 800106a:	89bb      	ldrh	r3, [r7, #12]
 800106c:	461a      	mov	r2, r3
 800106e:	4943      	ldr	r1, [pc, #268]	; (800117c <main+0x28c>)
 8001070:	483f      	ldr	r0, [pc, #252]	; (8001170 <main+0x280>)
 8001072:	f004 fc83 	bl	800597c <siprintf>
	  ST7920_Decode_UTF8(0, 1, 0, tx_buffer);
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <main+0x280>)
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff fd2d 	bl	8000adc <_Z18ST7920_Decode_UTF8thbPc>

      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, BLUE_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferBlue, 2);
 8001082:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <main+0x290>)
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <main+0x274>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4313      	orrs	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	2302      	movs	r3, #2
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <main+0x294>)
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	2152      	movs	r1, #82	; 0x52
 800109c:	482c      	ldr	r0, [pc, #176]	; (8001150 <main+0x260>)
 800109e:	f001 f8a7 	bl	80021f0 <HAL_I2C_Mem_Read_IT>
      HAL_Delay(10);
 80010a2:	200a      	movs	r0, #10
 80010a4:	f000 fb48 	bl	8001738 <HAL_Delay>
      Blue = (((uint16_t)(RxBufferBlue[1]<<8))|(uint16_t)RxBufferBlue[0])/K1;
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <main+0x294>)
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <main+0x294>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	431a      	orrs	r2, r3
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c0:	817b      	strh	r3, [r7, #10]
	  sprintf(tx_buffer,"Синий:%ld",Blue);
 80010c2:	897b      	ldrh	r3, [r7, #10]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4930      	ldr	r1, [pc, #192]	; (8001188 <main+0x298>)
 80010c8:	4829      	ldr	r0, [pc, #164]	; (8001170 <main+0x280>)
 80010ca:	f004 fc57 	bl	800597c <siprintf>
	  ST7920_Decode_UTF8(0, 2, 0, tx_buffer);
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <main+0x280>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	2102      	movs	r1, #2
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fd01 	bl	8000adc <_Z18ST7920_Decode_UTF8thbPc>

      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, WHITE_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferWhite, 2);
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <main+0x29c>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <main+0x274>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	2302      	movs	r3, #2
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <main+0x2a0>)
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2152      	movs	r1, #82	; 0x52
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <main+0x260>)
 80010f6:	f001 f87b 	bl	80021f0 <HAL_I2C_Mem_Read_IT>
      HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f000 fb1c 	bl	8001738 <HAL_Delay>
      White = (((uint16_t)(RxBufferWhite[1]<<8))|(uint16_t)RxBufferWhite[0])/K1;
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <main+0x2a0>)
 8001102:	785b      	ldrb	r3, [r3, #1]
 8001104:	b29b      	uxth	r3, r3
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b29b      	uxth	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <main+0x2a0>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	431a      	orrs	r2, r3
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	fb92 f3f3 	sdiv	r3, r2, r3
 8001118:	813b      	strh	r3, [r7, #8]
	  sprintf(tx_buffer,"Освещенность:%ld",White);
 800111a:	893b      	ldrh	r3, [r7, #8]
 800111c:	461a      	mov	r2, r3
 800111e:	491d      	ldr	r1, [pc, #116]	; (8001194 <main+0x2a4>)
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <main+0x280>)
 8001122:	f004 fc2b 	bl	800597c <siprintf>
	  ST7920_Decode_UTF8(0, 3, 0, tx_buffer);
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <main+0x280>)
 8001128:	2200      	movs	r2, #0
 800112a:	2103      	movs	r1, #3
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff fcd5 	bl	8000adc <_Z18ST7920_Decode_UTF8thbPc>
	  ST7920_Update();
 8001132:	f7ff fc87 	bl	8000a44 <_Z13ST7920_Updatev>

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113a:	4817      	ldr	r0, [pc, #92]	; (8001198 <main+0x2a8>)
 800113c:	f000 fdff 	bl	8001d3e <HAL_GPIO_TogglePin>
	  ST7920_Clean();
 8001140:	e743      	b.n	8000fca <main+0xda>
 8001142:	bf00      	nop
 8001144:	2000056c 	.word	0x2000056c
 8001148:	20000000 	.word	0x20000000
 800114c:	20000006 	.word	0x20000006
 8001150:	20000518 	.word	0x20000518
 8001154:	20000007 	.word	0x20000007
 8001158:	20000008 	.word	0x20000008
 800115c:	2000056d 	.word	0x2000056d
 8001160:	20000002 	.word	0x20000002
 8001164:	20000005 	.word	0x20000005
 8001168:	20000570 	.word	0x20000570
 800116c:	08006270 	.word	0x08006270
 8001170:	20000098 	.word	0x20000098
 8001174:	20000003 	.word	0x20000003
 8001178:	20000574 	.word	0x20000574
 800117c:	08006284 	.word	0x08006284
 8001180:	20000004 	.word	0x20000004
 8001184:	20000578 	.word	0x20000578
 8001188:	08006298 	.word	0x08006298
 800118c:	20000001 	.word	0x20000001
 8001190:	2000057c 	.word	0x2000057c
 8001194:	080062a8 	.word	0x080062a8
 8001198:	40020800 	.word	0x40020800

0800119c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	; 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2230      	movs	r2, #48	; 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fbde 	bl	800596c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <_Z18SystemClock_Configv+0xdc>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	4a2b      	ldr	r2, [pc, #172]	; (8001278 <_Z18SystemClock_Configv+0xdc>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	; 0x40
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <_Z18SystemClock_Configv+0xdc>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <_Z18SystemClock_Configv+0xe0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a25      	ldr	r2, [pc, #148]	; (800127c <_Z18SystemClock_Configv+0xe0>)
 80011e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <_Z18SystemClock_Configv+0xe0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001206:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800120c:	230c      	movs	r3, #12
 800120e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001210:	2360      	movs	r3, #96	; 0x60
 8001212:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001214:	2302      	movs	r3, #2
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001218:	2304      	movs	r3, #4
 800121a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	4618      	mov	r0, r3
 8001222:	f002 ff9b 	bl	800415c <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001236:	f000 f823 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	230f      	movs	r3, #15
 800123c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123e:	2302      	movs	r3, #2
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2103      	movs	r1, #3
 8001256:	4618      	mov	r0, r3
 8001258:	f003 f9f8 	bl	800464c <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf14      	ite	ne
 8001262:	2301      	movne	r3, #1
 8001264:	2300      	moveq	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800126c:	f000 f808 	bl	8001280 <Error_Handler>
  }
}
 8001270:	bf00      	nop
 8001272:	3750      	adds	r7, #80	; 0x50
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>
	...

0800128c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_SPI1_Init+0x64>)
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <MX_SPI1_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_SPI1_Init+0x64>)
 8001298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800129c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012c0:	2230      	movs	r2, #48	; 0x30
 80012c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012d8:	220a      	movs	r2, #10
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_SPI1_Init+0x64>)
 80012de:	f003 fb81 	bl	80049e4 <HAL_SPI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e8:	f7ff ffca 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000580 	.word	0x20000580
 80012f4:	40013000 	.word	0x40013000

080012f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_SPI_MspInit+0x94>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d133      	bne.n	8001382 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_SPI_MspInit+0x98>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_SPI_MspInit+0x98>)
 8001324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_SPI_MspInit+0x98>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_SPI_MspInit+0x98>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_SPI_MspInit+0x98>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_SPI_MspInit+0x98>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001352:	23a0      	movs	r3, #160	; 0xa0
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001362:	2305      	movs	r3, #5
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <HAL_SPI_MspInit+0x9c>)
 800136e:	f000 fb49 	bl	8001a04 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2023      	movs	r0, #35	; 0x23
 8001378:	f000 fadd 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800137c:	2023      	movs	r0, #35	; 0x23
 800137e:	f000 faf6 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40013000 	.word	0x40013000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f960 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM2_IRQHandler+0x10>)
 8001442:	f003 fecc 	bl	80051de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200005dc 	.word	0x200005dc

08001450 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <I2C1_EV_IRQHandler+0x10>)
 8001456:	f000 ff89 	bl	800236c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000518 	.word	0x20000518

08001464 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <I2C1_ER_IRQHandler+0x10>)
 800146a:	f001 f8f0 	bl	800264e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000518 	.word	0x20000518

08001478 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <SPI1_IRQHandler+0x10>)
 800147e:	f003 fbc5 	bl	8004c0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000580 	.word	0x20000580

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f004 fa2c 	bl	8005918 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20020000 	.word	0x20020000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	200005d8 	.word	0x200005d8
 80014f4:	20000638 	.word	0x20000638

080014f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_TIM2_Init+0x94>)
 800153a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001542:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001546:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MX_TIM2_Init+0x94>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001550:	2263      	movs	r2, #99	; 0x63
 8001552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_TIM2_Init+0x94>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001562:	f003 fded 	bl	8005140 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800156c:	f7ff fe88 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM2_Init+0x94>)
 800157e:	f003 ff36 	bl	80053ee <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001588:	f7ff fe7a 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800158c:	2320      	movs	r3, #32
 800158e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM2_Init+0x94>)
 800159a:	f004 f93b 	bl	8005814 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f7ff fe6c 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200005dc 	.word	0x200005dc

080015b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c4:	d115      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_TIM_Base_MspInit+0x48>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_TIM_Base_MspInit+0x48>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_TIM_Base_MspInit+0x48>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2101      	movs	r1, #1
 80015e6:	201c      	movs	r0, #28
 80015e8:	f000 f9a5 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ec:	201c      	movs	r0, #28
 80015ee:	f000 f9be 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001606:	490e      	ldr	r1, [pc, #56]	; (8001640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800161c:	4c0b      	ldr	r4, [pc, #44]	; (800164c <LoopFillZerobss+0x26>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800162a:	f7ff ff65 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f004 f979 	bl	8005924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff fc5d 	bl	8000ef0 <main>
  bx  lr    
 8001636:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001644:	080066f0 	.word	0x080066f0
  ldr r2, =_sbss
 8001648:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800164c:	20000638 	.word	0x20000638

08001650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <HAL_Init+0x40>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_Init+0x40>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_Init+0x40>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f94f 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fe86 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f967 	bl	800198a <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f92f 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000000c 	.word	0x2000000c
 80016f0:	20000014 	.word	0x20000014
 80016f4:	20000010 	.word	0x20000010

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000014 	.word	0x20000014
 800171c:	20000624 	.word	0x20000624

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000624 	.word	0x20000624

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000014 	.word	0x20000014

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff29 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff3e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff31 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d004      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e00c      	b.n	80019da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2205      	movs	r2, #5
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f4:	b2db      	uxtb	r3, r3
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	e159      	b.n	8001cd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f040 8148 	bne.w	8001cce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d005      	beq.n	8001a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d130      	bne.n	8001ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 0201 	and.w	r2, r3, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d017      	beq.n	8001af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d123      	bne.n	8001b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80a2 	beq.w	8001cce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_GPIO_Init+0x2e8>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a56      	ldr	r2, [pc, #344]	; (8001cec <HAL_GPIO_Init+0x2e8>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b54      	ldr	r3, [pc, #336]	; (8001cec <HAL_GPIO_Init+0x2e8>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba6:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a49      	ldr	r2, [pc, #292]	; (8001cf4 <HAL_GPIO_Init+0x2f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d019      	beq.n	8001c06 <HAL_GPIO_Init+0x202>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a48      	ldr	r2, [pc, #288]	; (8001cf8 <HAL_GPIO_Init+0x2f4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0x1fe>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a47      	ldr	r2, [pc, #284]	; (8001cfc <HAL_GPIO_Init+0x2f8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00d      	beq.n	8001bfe <HAL_GPIO_Init+0x1fa>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <HAL_GPIO_Init+0x2fc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d007      	beq.n	8001bfa <HAL_GPIO_Init+0x1f6>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a45      	ldr	r2, [pc, #276]	; (8001d04 <HAL_GPIO_Init+0x300>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_GPIO_Init+0x1f2>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e008      	b.n	8001c08 <HAL_GPIO_Init+0x204>
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x204>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e004      	b.n	8001c08 <HAL_GPIO_Init+0x204>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_Init+0x204>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x204>
 8001c06:	2300      	movs	r3, #0
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f002 0203 	and.w	r2, r2, #3
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	4093      	lsls	r3, r2
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c18:	4935      	ldr	r1, [pc, #212]	; (8001cf0 <HAL_GPIO_Init+0x2ec>)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4a:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c74:	4a24      	ldr	r2, [pc, #144]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9e:	4a1a      	ldr	r2, [pc, #104]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc8:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_GPIO_Init+0x304>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	f67f aea2 	bls.w	8001a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40013c00 	.word	0x40013c00

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d50:	887a      	ldrh	r2, [r7, #2]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	041a      	lsls	r2, r3, #16
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	400b      	ands	r3, r1
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e12b      	b.n	8001fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff f850 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f002 fdf0 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a81      	ldr	r2, [pc, #516]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <HAL_I2C_Init+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_I2C_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <HAL_I2C_Init+0x92>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ff0 <HAL_I2C_Init+0x27c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e7      	b.n	8001fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a78      	ldr	r2, [pc, #480]	; (8001ff4 <HAL_I2C_Init+0x280>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d802      	bhi.n	8001e48 <HAL_I2C_Init+0xd4>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	e009      	b.n	8001e5c <HAL_I2C_Init+0xe8>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_I2C_Init+0x284>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d819      	bhi.n	8001eb0 <HAL_I2C_Init+0x13c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_I2C_Init+0x138>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e59      	subs	r1, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	e051      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_I2C_Init+0x168>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_I2C_Init+0x18e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x196>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e022      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_Init+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e58      	subs	r0, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	6809      	ldr	r1, [r1, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6911      	ldr	r1, [r2, #16]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	001e847f 	.word	0x001e847f
 8001ff0:	003d08ff 	.word	0x003d08ff
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]
 800200e:	460b      	mov	r3, r1
 8002010:	813b      	strh	r3, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002016:	f7ff fb83 	bl	8001720 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b20      	cmp	r3, #32
 8002026:	f040 80d9 	bne.w	80021dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2319      	movs	r3, #25
 8002030:	2201      	movs	r2, #1
 8002032:	496d      	ldr	r1, [pc, #436]	; (80021e8 <HAL_I2C_Mem_Write+0x1ec>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f001 febd 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
 8002042:	e0cc      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_I2C_Mem_Write+0x56>
 800204e:	2302      	movs	r3, #2
 8002050:	e0c5      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d007      	beq.n	8002078 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2221      	movs	r2, #33	; 0x21
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a4d      	ldr	r2, [pc, #308]	; (80021ec <HAL_I2C_Mem_Write+0x1f0>)
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ba:	88f8      	ldrh	r0, [r7, #6]
 80020bc:	893a      	ldrh	r2, [r7, #8]
 80020be:	8979      	ldrh	r1, [r7, #10]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4603      	mov	r3, r0
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f001 fd34 	bl	8003b38 <I2C_RequestMemoryWrite>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d052      	beq.n	800217c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e081      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f001 ff3e 	bl	8003f60 <I2C_WaitOnTXEFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d107      	bne.n	8002102 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06b      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d11b      	bne.n	800217c <HAL_I2C_Mem_Write+0x180>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d017      	beq.n	800217c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1aa      	bne.n	80020da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f001 ff2a 	bl	8003fe2 <I2C_WaitOnBTFFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b04      	cmp	r3, #4
 800219a:	d107      	bne.n	80021ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e016      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	00100002 	.word	0x00100002
 80021ec:	ffff0000 	.word	0xffff0000

080021f0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b20      	cmp	r3, #32
 8002218:	f040 809a 	bne.w	8002350 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_I2C_Mem_Read_IT+0x170>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	4a50      	ldr	r2, [pc, #320]	; (8002364 <HAL_I2C_Mem_Read_IT+0x174>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	0a1a      	lsrs	r2, r3, #8
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009a      	lsls	r2, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3b01      	subs	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e070      	b.n	8002352 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d0db      	beq.n	8002236 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_I2C_Mem_Read_IT+0x9c>
 8002288:	2302      	movs	r3, #2
 800228a:	e062      	b.n	8002352 <HAL_I2C_Mem_Read_IT+0x162>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d007      	beq.n	80022b2 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2222      	movs	r2, #34	; 0x22
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2240      	movs	r2, #64	; 0x40
 80022ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a3a      	ldr	r2, [r7, #32]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_I2C_Mem_Read_IT+0x178>)
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80022f4:	897a      	ldrh	r2, [r7, #10]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80022fa:	893a      	ldrh	r2, [r7, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002300:	88fa      	ldrh	r2, [r7, #6]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800231a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800234a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000000c 	.word	0x2000000c
 8002364:	14f8b589 	.word	0x14f8b589
 8002368:	ffff0000 	.word	0xffff0000

0800236c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b10      	cmp	r3, #16
 800239a:	d003      	beq.n	80023a4 <HAL_I2C_EV_IRQHandler+0x38>
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	f040 80c1 	bne.w	8002526 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_I2C_EV_IRQHandler+0x6e>
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80023c4:	d003      	beq.n	80023ce <HAL_I2C_EV_IRQHandler+0x62>
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80023cc:	d101      	bne.n	80023d2 <HAL_I2C_EV_IRQHandler+0x66>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_I2C_EV_IRQHandler+0x68>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f000 8132 	beq.w	800263e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00c      	beq.n	80023fe <HAL_I2C_EV_IRQHandler+0x92>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	0a5b      	lsrs	r3, r3, #9
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f001 fe98 	bl	8004126 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fd83 	bl	8002f02 <I2C_Master_SB>
 80023fc:	e092      	b.n	8002524 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_I2C_EV_IRQHandler+0xb2>
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	0a5b      	lsrs	r3, r3, #9
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fdf9 	bl	800300e <I2C_Master_ADD10>
 800241c:	e082      	b.n	8002524 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_I2C_EV_IRQHandler+0xd2>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	0a5b      	lsrs	r3, r3, #9
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fe13 	bl	8003062 <I2C_Master_ADDR>
 800243c:	e072      	b.n	8002524 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d03b      	beq.n	80024c2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002458:	f000 80f3 	beq.w	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	09db      	lsrs	r3, r3, #7
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00f      	beq.n	8002488 <HAL_I2C_EV_IRQHandler+0x11c>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <HAL_I2C_EV_IRQHandler+0x11c>
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d103      	bne.n	8002488 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f9f3 	bl	800286c <I2C_MasterTransmit_TXE>
 8002486:	e04d      	b.n	8002524 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80d6 	beq.w	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	0a5b      	lsrs	r3, r3, #9
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80cf 	beq.w	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	2b21      	cmp	r3, #33	; 0x21
 80024a8:	d103      	bne.n	80024b2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa7a 	bl	80029a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024b0:	e0c7      	b.n	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	f040 80c4 	bne.w	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fae8 	bl	8002a90 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024c0:	e0bf      	b.n	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024d0:	f000 80b7 	beq.w	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00f      	beq.n	8002500 <HAL_I2C_EV_IRQHandler+0x194>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	0a9b      	lsrs	r3, r3, #10
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d009      	beq.n	8002500 <HAL_I2C_EV_IRQHandler+0x194>
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fb5d 	bl	8002bb8 <I2C_MasterReceive_RXNE>
 80024fe:	e011      	b.n	8002524 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 809a 	beq.w	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	0a5b      	lsrs	r3, r3, #9
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8093 	beq.w	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fc06 	bl	8002d2e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002522:	e08e      	b.n	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002524:	e08d      	b.n	8002642 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e007      	b.n	8002548 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <HAL_I2C_EV_IRQHandler+0x20e>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	0a5b      	lsrs	r3, r3, #9
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002570:	69b9      	ldr	r1, [r7, #24]
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 ffc4 	bl	8003500 <I2C_Slave_ADDR>
 8002578:	e066      	b.n	8002648 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_I2C_EV_IRQHandler+0x22e>
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	0a5b      	lsrs	r3, r3, #9
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fffe 	bl	8003594 <I2C_Slave_STOPF>
 8002598:	e056      	b.n	8002648 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800259a:	7bbb      	ldrb	r3, [r7, #14]
 800259c:	2b21      	cmp	r3, #33	; 0x21
 800259e:	d002      	beq.n	80025a6 <HAL_I2C_EV_IRQHandler+0x23a>
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
 80025a2:	2b29      	cmp	r3, #41	; 0x29
 80025a4:	d125      	bne.n	80025f2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	09db      	lsrs	r3, r3, #7
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00f      	beq.n	80025d2 <HAL_I2C_EV_IRQHandler+0x266>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	0a9b      	lsrs	r3, r3, #10
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_I2C_EV_IRQHandler+0x266>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 feda 	bl	8003384 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025d0:	e039      	b.n	8002646 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d033      	beq.n	8002646 <HAL_I2C_EV_IRQHandler+0x2da>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	0a5b      	lsrs	r3, r3, #9
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02d      	beq.n	8002646 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 ff07 	bl	80033fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025f0:	e029      	b.n	8002646 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00f      	beq.n	800261e <HAL_I2C_EV_IRQHandler+0x2b2>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	0a9b      	lsrs	r3, r3, #10
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <HAL_I2C_EV_IRQHandler+0x2b2>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 ff12 	bl	8003440 <I2C_SlaveReceive_RXNE>
 800261c:	e014      	b.n	8002648 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00e      	beq.n	8002648 <HAL_I2C_EV_IRQHandler+0x2dc>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	0a5b      	lsrs	r3, r3, #9
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 ff40 	bl	80034bc <I2C_SlaveReceive_BTF>
 800263c:	e004      	b.n	8002648 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800263e:	bf00      	nop
 8002640:	e002      	b.n	8002648 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002646:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b08a      	sub	sp, #40	; 0x28
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002670:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00e      	beq.n	800269c <HAL_I2C_ER_IRQHandler+0x4e>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800269a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	0a5b      	lsrs	r3, r3, #9
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <HAL_I2C_ER_IRQHandler+0x78>
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80026c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	0a9b      	lsrs	r3, r3, #10
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03f      	beq.n	8002752 <HAL_I2C_ER_IRQHandler+0x104>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d039      	beq.n	8002752 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80026de:	7efb      	ldrb	r3, [r7, #27]
 80026e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80026f8:	7ebb      	ldrb	r3, [r7, #26]
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d112      	bne.n	8002724 <HAL_I2C_ER_IRQHandler+0xd6>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10f      	bne.n	8002724 <HAL_I2C_ER_IRQHandler+0xd6>
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b21      	cmp	r3, #33	; 0x21
 8002708:	d008      	beq.n	800271c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	2b29      	cmp	r3, #41	; 0x29
 800270e:	d005      	beq.n	800271c <HAL_I2C_ER_IRQHandler+0xce>
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b28      	cmp	r3, #40	; 0x28
 8002714:	d106      	bne.n	8002724 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b21      	cmp	r3, #33	; 0x21
 800271a:	d103      	bne.n	8002724 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f001 f869 	bl	80037f4 <I2C_Slave_AF>
 8002722:	e016      	b.n	8002752 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800272c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002736:	7efb      	ldrb	r3, [r7, #27]
 8002738:	2b10      	cmp	r3, #16
 800273a:	d002      	beq.n	8002742 <HAL_I2C_ER_IRQHandler+0xf4>
 800273c:	7efb      	ldrb	r3, [r7, #27]
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d107      	bne.n	8002752 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002750:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	0adb      	lsrs	r3, r3, #11
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00e      	beq.n	800277c <HAL_I2C_ER_IRQHandler+0x12e>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f043 0308 	orr.w	r3, r3, #8
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800277a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f001 f8a0 	bl	80038d4 <I2C_ITError>
  }
}
 8002794:	bf00      	nop
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
 80027f8:	4613      	mov	r3, r2
 80027fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002882:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	2b00      	cmp	r3, #0
 8002890:	d150      	bne.n	8002934 <I2C_MasterTransmit_TXE+0xc8>
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b21      	cmp	r3, #33	; 0x21
 8002896:	d14d      	bne.n	8002934 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d01d      	beq.n	80028da <I2C_MasterTransmit_TXE+0x6e>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d01a      	beq.n	80028da <I2C_MasterTransmit_TXE+0x6e>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028aa:	d016      	beq.n	80028da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2211      	movs	r2, #17
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff62 	bl	800279c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028d8:	e060      	b.n	800299c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d107      	bne.n	8002924 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff7d 	bl	800281c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002922:	e03b      	b.n	800299c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff35 	bl	800279c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002932:	e033      	b.n	800299c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b21      	cmp	r3, #33	; 0x21
 8002938:	d005      	beq.n	8002946 <I2C_MasterTransmit_TXE+0xda>
 800293a:	7bbb      	ldrb	r3, [r7, #14]
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	d12d      	bne.n	800299c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b22      	cmp	r3, #34	; 0x22
 8002944:	d12a      	bne.n	800299c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d108      	bne.n	8002962 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002960:	e01c      	b.n	800299c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d103      	bne.n	8002976 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f88e 	bl	8002a90 <I2C_MemoryTransmit_TXE_BTF>
}
 8002974:	e012      	b.n	800299c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800299a:	e7ff      	b.n	800299c <I2C_MasterTransmit_TXE+0x130>
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b21      	cmp	r3, #33	; 0x21
 80029bc:	d164      	bne.n	8002a88 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d012      	beq.n	80029ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80029ec:	e04c      	b.n	8002a88 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d01d      	beq.n	8002a30 <I2C_MasterTransmit_BTF+0x8c>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d01a      	beq.n	8002a30 <I2C_MasterTransmit_BTF+0x8c>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a00:	d016      	beq.n	8002a30 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a10:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2211      	movs	r2, #17
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff feb7 	bl	800279c <HAL_I2C_MasterTxCpltCallback>
}
 8002a2e:	e02b      	b.n	8002a88 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a3e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d107      	bne.n	8002a7a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fed2 	bl	800281c <HAL_I2C_MemTxCpltCallback>
}
 8002a78:	e006      	b.n	8002a88 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fe8a 	bl	800279c <HAL_I2C_MasterTxCpltCallback>
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11d      	bne.n	8002ae4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10b      	bne.n	8002ac8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002ac6:	e073      	b.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	121b      	asrs	r3, r3, #8
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ae2:	e065      	b.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d10b      	bne.n	8002b04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b02:	e055      	b.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d151      	bne.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b22      	cmp	r3, #34	; 0x22
 8002b10:	d10d      	bne.n	8002b2e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b2c:	e040      	b.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b21      	cmp	r3, #33	; 0x21
 8002b3c:	d112      	bne.n	8002b64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b62:	e025      	b.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d120      	bne.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b21      	cmp	r3, #33	; 0x21
 8002b72:	d11d      	bne.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b82:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff fe36 	bl	800281c <HAL_I2C_MemTxCpltCallback>
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b22      	cmp	r3, #34	; 0x22
 8002bca:	f040 80ac 	bne.w	8002d26 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d921      	bls.n	8002c20 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	f040 808c 	bne.w	8002d26 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002c1e:	e082      	b.n	8002d26 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d075      	beq.n	8002d14 <I2C_MasterReceive_RXNE+0x15c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d002      	beq.n	8002c34 <I2C_MasterReceive_RXNE+0x7c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d16f      	bne.n	8002d14 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f001 fa15 	bl	8004064 <I2C_WaitOnSTOPRequestThroughIT>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d142      	bne.n	8002cc6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c5e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d10a      	bne.n	8002cb0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fdc1 	bl	8002830 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cae:	e03a      	b.n	8002d26 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2212      	movs	r2, #18
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fd76 	bl	80027b0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cc4:	e02f      	b.n	8002d26 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cd4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fd99 	bl	8002844 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d12:	e008      	b.n	8002d26 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	605a      	str	r2, [r3, #4]
}
 8002d24:	e7ff      	b.n	8002d26 <I2C_MasterReceive_RXNE+0x16e>
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d11b      	bne.n	8002d7e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d54:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d7c:	e0bd      	b.n	8002efa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d129      	bne.n	8002ddc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d96:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d00a      	beq.n	8002db4 <I2C_MasterReceive_BTF+0x86>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d007      	beq.n	8002db4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002dda:	e08e      	b.n	8002efa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d176      	bne.n	8002ed4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d002      	beq.n	8002df2 <I2C_MasterReceive_BTF+0xc4>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d108      	bne.n	8002e04 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e019      	b.n	8002e38 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d002      	beq.n	8002e10 <I2C_MasterReceive_BTF+0xe2>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d108      	bne.n	8002e22 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e00a      	b.n	8002e38 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d007      	beq.n	8002e38 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d10a      	bne.n	8002ebe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff fcba 	bl	8002830 <HAL_I2C_MemRxCpltCallback>
}
 8002ebc:	e01d      	b.n	8002efa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2212      	movs	r2, #18
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fc6f 	bl	80027b0 <HAL_I2C_MasterRxCpltCallback>
}
 8002ed2:	e012      	b.n	8002efa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d117      	bne.n	8002f46 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f2e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f30:	e067      	b.n	8003002 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	611a      	str	r2, [r3, #16]
}
 8002f44:	e05d      	b.n	8003002 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4e:	d133      	bne.n	8002fb8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b21      	cmp	r3, #33	; 0x21
 8002f5a:	d109      	bne.n	8002f70 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f6c:	611a      	str	r2, [r3, #16]
 8002f6e:	e008      	b.n	8002f82 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <I2C_Master_SB+0x92>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d108      	bne.n	8002fa6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d032      	beq.n	8003002 <I2C_Master_SB+0x100>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02d      	beq.n	8003002 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb4:	605a      	str	r2, [r3, #4]
}
 8002fb6:	e024      	b.n	8003002 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10e      	bne.n	8002fde <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	11db      	asrs	r3, r3, #7
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0306 	and.w	r3, r3, #6
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f063 030f 	orn	r3, r3, #15
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]
}
 8002fdc:	e011      	b.n	8003002 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10d      	bne.n	8003002 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	11db      	asrs	r3, r3, #7
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 0306 	and.w	r3, r3, #6
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f063 030e 	orn	r3, r3, #14
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	611a      	str	r2, [r3, #16]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	b2da      	uxtb	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <I2C_Master_ADD10+0x26>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d108      	bne.n	8003046 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <I2C_Master_ADD10+0x48>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003054:	605a      	str	r2, [r3, #4]
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003062:	b480      	push	{r7}
 8003064:	b091      	sub	sp, #68	; 0x44
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b22      	cmp	r3, #34	; 0x22
 800308a:	f040 8169 	bne.w	8003360 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <I2C_Master_ADDR+0x54>
 8003096:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d10b      	bne.n	80030b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	e160      	b.n	8003378 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11d      	bne.n	80030fa <I2C_Master_ADDR+0x98>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030c6:	d118      	bne.n	80030fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	651a      	str	r2, [r3, #80]	; 0x50
 80030f8:	e13e      	b.n	8003378 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003104:	2300      	movs	r3, #0
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	e115      	b.n	8003358 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	f040 808a 	bne.w	800324c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800313e:	d137      	bne.n	80031b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315e:	d113      	bne.n	8003188 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	e0e7      	b.n	8003358 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003188:	2300      	movs	r3, #0
 800318a:	623b      	str	r3, [r7, #32]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	623b      	str	r3, [r7, #32]
 800319c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e0d3      	b.n	8003358 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d02e      	beq.n	8003214 <I2C_Master_ADDR+0x1b2>
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d02b      	beq.n	8003214 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031be:	2b12      	cmp	r3, #18
 80031c0:	d102      	bne.n	80031c8 <I2C_Master_ADDR+0x166>
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d125      	bne.n	8003214 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d00e      	beq.n	80031ec <I2C_Master_ADDR+0x18a>
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d00b      	beq.n	80031ec <I2C_Master_ADDR+0x18a>
 80031d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d008      	beq.n	80031ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e007      	b.n	80031fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	e0a1      	b.n	8003358 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003222:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e085      	b.n	8003358 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d14d      	bne.n	80032f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	2b04      	cmp	r3, #4
 800325a:	d016      	beq.n	800328a <I2C_Master_ADDR+0x228>
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	2b02      	cmp	r3, #2
 8003260:	d013      	beq.n	800328a <I2C_Master_ADDR+0x228>
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	2b10      	cmp	r3, #16
 8003266:	d010      	beq.n	800328a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003276:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e007      	b.n	800329a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003298:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a8:	d117      	bne.n	80032da <I2C_Master_ADDR+0x278>
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b0:	d00b      	beq.n	80032ca <I2C_Master_ADDR+0x268>
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d008      	beq.n	80032ca <I2C_Master_ADDR+0x268>
 80032b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d005      	beq.n	80032ca <I2C_Master_ADDR+0x268>
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d002      	beq.n	80032ca <I2C_Master_ADDR+0x268>
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d107      	bne.n	80032da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	e032      	b.n	8003358 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003300:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003310:	d117      	bne.n	8003342 <I2C_Master_ADDR+0x2e0>
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003318:	d00b      	beq.n	8003332 <I2C_Master_ADDR+0x2d0>
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	2b01      	cmp	r3, #1
 800331e:	d008      	beq.n	8003332 <I2C_Master_ADDR+0x2d0>
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	2b08      	cmp	r3, #8
 8003324:	d005      	beq.n	8003332 <I2C_Master_ADDR+0x2d0>
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	2b10      	cmp	r3, #16
 800332a:	d002      	beq.n	8003332 <I2C_Master_ADDR+0x2d0>
 800332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332e:	2b20      	cmp	r3, #32
 8003330:	d107      	bne.n	8003342 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003340:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800335e:	e00b      	b.n	8003378 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
}
 8003376:	e7ff      	b.n	8003378 <I2C_Master_ADDR+0x316>
 8003378:	bf00      	nop
 800337a:	3744      	adds	r7, #68	; 0x44
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02b      	beq.n	80033f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	781a      	ldrb	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d114      	bne.n	80033f6 <I2C_SlaveTransmit_TXE+0x72>
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b29      	cmp	r3, #41	; 0x29
 80033d0:	d111      	bne.n	80033f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2221      	movs	r2, #33	; 0x21
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2228      	movs	r2, #40	; 0x28
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff f9e7 	bl	80027c4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d011      	beq.n	8003434 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02c      	beq.n	80034b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d114      	bne.n	80034b4 <I2C_SlaveReceive_RXNE+0x74>
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b2a      	cmp	r3, #42	; 0x2a
 800348e:	d111      	bne.n	80034b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2222      	movs	r2, #34	; 0x22
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2228      	movs	r2, #40	; 0x28
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff f992 	bl	80027d8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d012      	beq.n	80034f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800351a:	2b28      	cmp	r3, #40	; 0x28
 800351c:	d127      	bne.n	800356e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	09db      	lsrs	r3, r3, #7
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	81bb      	strh	r3, [r7, #12]
 8003550:	e002      	b.n	8003558 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003560:	89ba      	ldrh	r2, [r7, #12]
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff f940 	bl	80027ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800356c:	e00e      	b.n	800358c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f0:	d172      	bne.n	80036d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b22      	cmp	r3, #34	; 0x22
 80035f6:	d002      	beq.n	80035fe <I2C_Slave_STOPF+0x6a>
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b2a      	cmp	r3, #42	; 0x2a
 80035fc:	d135      	bne.n	800366a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	b29a      	uxth	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f043 0204 	orr.w	r2, r3, #4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003630:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe f9d5 	bl	80019e6 <HAL_DMA_GetState>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d049      	beq.n	80036d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	4a69      	ldr	r2, [pc, #420]	; (80037ec <I2C_Slave_STOPF+0x258>)
 8003648:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe f9a7 	bl	80019a2 <HAL_DMA_Abort_IT>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03d      	beq.n	80036d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003664:	4610      	mov	r0, r2
 8003666:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003668:	e035      	b.n	80036d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800369c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe f99f 	bl	80019e6 <HAL_DMA_GetState>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d014      	beq.n	80036d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	4a4e      	ldr	r2, [pc, #312]	; (80037ec <I2C_Slave_STOPF+0x258>)
 80036b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe f971 	bl	80019a2 <HAL_DMA_Abort_IT>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036d0:	4610      	mov	r0, r2
 80036d2:	4798      	blx	r3
 80036d4:	e000      	b.n	80036d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d03e      	beq.n	8003760 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d112      	bne.n	8003716 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d112      	bne.n	800374a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f043 0204 	orr.w	r2, r3, #4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8b3 	bl	80038d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800376e:	e039      	b.n	80037e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b2a      	cmp	r3, #42	; 0x2a
 8003774:	d109      	bne.n	800378a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2228      	movs	r2, #40	; 0x28
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff f827 	bl	80027d8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b28      	cmp	r3, #40	; 0x28
 8003794:	d111      	bne.n	80037ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <I2C_Slave_STOPF+0x25c>)
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff f828 	bl	8002808 <HAL_I2C_ListenCpltCallback>
}
 80037b8:	e014      	b.n	80037e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	2b22      	cmp	r3, #34	; 0x22
 80037c0:	d002      	beq.n	80037c8 <I2C_Slave_STOPF+0x234>
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b22      	cmp	r3, #34	; 0x22
 80037c6:	d10d      	bne.n	80037e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fe fffa 	bl	80027d8 <HAL_I2C_SlaveRxCpltCallback>
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	08003c65 	.word	0x08003c65
 80037f0:	ffff0000 	.word	0xffff0000

080037f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003802:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d002      	beq.n	8003816 <I2C_Slave_AF+0x22>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b20      	cmp	r3, #32
 8003814:	d129      	bne.n	800386a <I2C_Slave_AF+0x76>
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b28      	cmp	r3, #40	; 0x28
 800381a:	d126      	bne.n	800386a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a2c      	ldr	r2, [pc, #176]	; (80038d0 <I2C_Slave_AF+0xdc>)
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003830:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800383a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe ffd0 	bl	8002808 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003868:	e02e      	b.n	80038c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b21      	cmp	r3, #33	; 0x21
 800386e:	d126      	bne.n	80038be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <I2C_Slave_AF+0xdc>)
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2221      	movs	r2, #33	; 0x21
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800389a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe ff84 	bl	80027c4 <HAL_I2C_SlaveTxCpltCallback>
}
 80038bc:	e004      	b.n	80038c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c6:	615a      	str	r2, [r3, #20]
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	ffff0000 	.word	0xffff0000

080038d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038ec:	7bbb      	ldrb	r3, [r7, #14]
 80038ee:	2b10      	cmp	r3, #16
 80038f0:	d002      	beq.n	80038f8 <I2C_ITError+0x24>
 80038f2:	7bbb      	ldrb	r3, [r7, #14]
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d10a      	bne.n	800390e <I2C_ITError+0x3a>
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b22      	cmp	r3, #34	; 0x22
 80038fc:	d107      	bne.n	800390e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800390c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003914:	2b28      	cmp	r3, #40	; 0x28
 8003916:	d107      	bne.n	8003928 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2228      	movs	r2, #40	; 0x28
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003926:	e015      	b.n	8003954 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003936:	d00a      	beq.n	800394e <I2C_ITError+0x7a>
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b60      	cmp	r3, #96	; 0x60
 800393c:	d007      	beq.n	800394e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003962:	d162      	bne.n	8003a2a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003972:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d020      	beq.n	80039c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	4a6a      	ldr	r2, [pc, #424]	; (8003b30 <I2C_ITError+0x25c>)
 8003988:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe f807 	bl	80019a2 <HAL_DMA_Abort_IT>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8089 	beq.w	8003aae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039be:	4610      	mov	r0, r2
 80039c0:	4798      	blx	r3
 80039c2:	e074      	b.n	8003aae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	4a59      	ldr	r2, [pc, #356]	; (8003b30 <I2C_ITError+0x25c>)
 80039ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd ffe6 	bl	80019a2 <HAL_DMA_Abort_IT>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d068      	beq.n	8003aae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d10b      	bne.n	8003a02 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a24:	4610      	mov	r0, r2
 8003a26:	4798      	blx	r3
 8003a28:	e041      	b.n	8003aae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b60      	cmp	r3, #96	; 0x60
 8003a34:	d125      	bne.n	8003a82 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d10b      	bne.n	8003a6a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe feec 	bl	8002858 <HAL_I2C_AbortCpltCallback>
 8003a80:	e015      	b.n	8003aae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d10b      	bne.n	8003aa8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fe fecb 	bl	8002844 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10e      	bne.n	8003adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d113      	bne.n	8003b28 <I2C_ITError+0x254>
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b28      	cmp	r3, #40	; 0x28
 8003b04:	d110      	bne.n	8003b28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <I2C_ITError+0x260>)
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe fe70 	bl	8002808 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	08003c65 	.word	0x08003c65
 8003b34:	ffff0000 	.word	0xffff0000

08003b38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	4608      	mov	r0, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	461a      	mov	r2, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	817b      	strh	r3, [r7, #10]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	813b      	strh	r3, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f920 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b88:	d103      	bne.n	8003b92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e05f      	b.n	8003c56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b96:	897b      	ldrh	r3, [r7, #10]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	492d      	ldr	r1, [pc, #180]	; (8003c60 <I2C_RequestMemoryWrite+0x128>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f958 	bl	8003e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e04c      	b.n	8003c56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f9c2 	bl	8003f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e02b      	b.n	8003c56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	611a      	str	r2, [r3, #16]
 8003c0e:	e021      	b.n	8003c54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c10:	893b      	ldrh	r3, [r7, #8]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	6a39      	ldr	r1, [r7, #32]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f99c 	bl	8003f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d107      	bne.n	8003c46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e005      	b.n	8003c56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4a:	893b      	ldrh	r3, [r7, #8]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	00010002 	.word	0x00010002

08003c64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c7e:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <I2C_DMAAbort+0x148>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <I2C_DMAAbort+0x14c>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0a1a      	lsrs	r2, r3, #8
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00da      	lsls	r2, r3, #3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003caa:	e00a      	b.n	8003cc2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc0:	d0ea      	beq.n	8003c98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	2200      	movs	r2, #0
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	2200      	movs	r2, #0
 8003ce0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	2200      	movs	r2, #0
 8003d06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	2200      	movs	r2, #0
 8003d16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b60      	cmp	r3, #96	; 0x60
 8003d32:	d10e      	bne.n	8003d52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7fe fd84 	bl	8002858 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d50:	e027      	b.n	8003da2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d58:	2b28      	cmp	r3, #40	; 0x28
 8003d5a:	d117      	bne.n	8003d8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2228      	movs	r2, #40	; 0x28
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d8a:	e007      	b.n	8003d9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d9c:	6978      	ldr	r0, [r7, #20]
 8003d9e:	f7fe fd51 	bl	8002844 <HAL_I2C_ErrorCallback>
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000000c 	.word	0x2000000c
 8003db0:	14f8b589 	.word	0x14f8b589

08003db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc4:	e025      	b.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d021      	beq.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fd fca7 	bl	8001720 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d116      	bne.n	8003e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e023      	b.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d10d      	bne.n	8003e38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	43da      	mvns	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4013      	ands	r3, r2
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	e00c      	b.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d0b6      	beq.n	8003dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e70:	e051      	b.n	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d123      	bne.n	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f043 0204 	orr.w	r2, r3, #4
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e046      	b.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d021      	beq.n	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed2:	f7fd fc25 	bl	8001720 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d116      	bne.n	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e020      	b.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d10c      	bne.n	8003f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	43da      	mvns	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e00b      	b.n	8003f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	43da      	mvns	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d18d      	bne.n	8003e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f6c:	e02d      	b.n	8003fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f8aa 	bl	80040c8 <I2C_IsAcknowledgeFailed>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e02d      	b.n	8003fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d021      	beq.n	8003fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fd fbcb 	bl	8001720 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d116      	bne.n	8003fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e007      	b.n	8003fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d1ca      	bne.n	8003f6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fee:	e02d      	b.n	800404c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f869 	bl	80040c8 <I2C_IsAcknowledgeFailed>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e02d      	b.n	800405c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d021      	beq.n	800404c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004008:	f7fd fb8a 	bl	8001720 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	d302      	bcc.n	800401e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d116      	bne.n	800404c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f043 0220 	orr.w	r2, r3, #32
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e007      	b.n	800405c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d1ca      	bne.n	8003ff0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	08db      	lsrs	r3, r3, #3
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0a1a      	lsrs	r2, r3, #8
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b01      	subs	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e008      	b.n	80040b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b0:	d0e9      	beq.n	8004086 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	2000000c 	.word	0x2000000c
 80040c4:	14f8b589 	.word	0x14f8b589

080040c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040de:	d11b      	bne.n	8004118 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004136:	d103      	bne.n	8004140 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800413e:	e007      	b.n	8004150 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004148:	d102      	bne.n	8004150 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2208      	movs	r2, #8
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e267      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d075      	beq.n	8004266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x240>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004186:	4b85      	ldr	r3, [pc, #532]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418e:	2b08      	cmp	r3, #8
 8004190:	d112      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4b82      	ldr	r3, [pc, #520]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419e:	d10b      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	4b7e      	ldr	r3, [pc, #504]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d05b      	beq.n	8004264 <HAL_RCC_OscConfig+0x108>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d157      	bne.n	8004264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e242      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d106      	bne.n	80041d0 <HAL_RCC_OscConfig+0x74>
 80041c2:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a75      	ldr	r2, [pc, #468]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e01d      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x98>
 80041da:	4b70      	ldr	r3, [pc, #448]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a6f      	ldr	r2, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b6d      	ldr	r3, [pc, #436]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6c      	ldr	r2, [pc, #432]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041f4:	4b69      	ldr	r3, [pc, #420]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a68      	ldr	r2, [pc, #416]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b66      	ldr	r3, [pc, #408]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a65      	ldr	r2, [pc, #404]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fd fa84 	bl	8001720 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421c:	f7fd fa80 	bl	8001720 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e207      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b5b      	ldr	r3, [pc, #364]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0xc0>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fd fa70 	bl	8001720 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fd fa6c 	bl	8001720 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e1f3      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	4b51      	ldr	r3, [pc, #324]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0xe8>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d063      	beq.n	800433a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004272:	4b4a      	ldr	r3, [pc, #296]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004286:	2b08      	cmp	r3, #8
 8004288:	d11c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <HAL_RCC_OscConfig+0x240>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_RCC_OscConfig+0x152>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e1c7      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ae:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4937      	ldr	r1, [pc, #220]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	e03a      	b.n	800433a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_OscConfig+0x244>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fd fa25 	bl	8001720 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042da:	f7fd fa21 	bl	8001720 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1a8      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4925      	ldr	r1, [pc, #148]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
 800430c:	e015      	b.n	800433a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCC_OscConfig+0x244>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fa04 	bl	8001720 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431c:	f7fd fa00 	bl	8001720 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e187      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d036      	beq.n	80043b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d016      	beq.n	800437c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <HAL_RCC_OscConfig+0x248>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fd f9e4 	bl	8001720 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435c:	f7fd f9e0 	bl	8001720 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e167      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_OscConfig+0x240>)
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x200>
 800437a:	e01b      	b.n	80043b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_OscConfig+0x248>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004382:	f7fd f9cd 	bl	8001720 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	e00e      	b.n	80043a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438a:	f7fd f9c9 	bl	8001720 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d907      	bls.n	80043a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e150      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
 800439c:	40023800 	.word	0x40023800
 80043a0:	42470000 	.word	0x42470000
 80043a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a8:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ea      	bne.n	800438a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8097 	beq.w	80044f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b81      	ldr	r3, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	4b7d      	ldr	r3, [pc, #500]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a7c      	ldr	r2, [pc, #496]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b7a      	ldr	r3, [pc, #488]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b77      	ldr	r3, [pc, #476]	; (80045d0 <HAL_RCC_OscConfig+0x474>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d118      	bne.n	8004430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fe:	4b74      	ldr	r3, [pc, #464]	; (80045d0 <HAL_RCC_OscConfig+0x474>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a73      	ldr	r2, [pc, #460]	; (80045d0 <HAL_RCC_OscConfig+0x474>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fd f989 	bl	8001720 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004412:	f7fd f985 	bl	8001720 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e10c      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	4b6a      	ldr	r3, [pc, #424]	; (80045d0 <HAL_RCC_OscConfig+0x474>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d106      	bne.n	8004446 <HAL_RCC_OscConfig+0x2ea>
 8004438:	4b64      	ldr	r3, [pc, #400]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a63      	ldr	r2, [pc, #396]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
 8004444:	e01c      	b.n	8004480 <HAL_RCC_OscConfig+0x324>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b05      	cmp	r3, #5
 800444c:	d10c      	bne.n	8004468 <HAL_RCC_OscConfig+0x30c>
 800444e:	4b5f      	ldr	r3, [pc, #380]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	4a5e      	ldr	r2, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004454:	f043 0304 	orr.w	r3, r3, #4
 8004458:	6713      	str	r3, [r2, #112]	; 0x70
 800445a:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a5b      	ldr	r2, [pc, #364]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
 8004466:	e00b      	b.n	8004480 <HAL_RCC_OscConfig+0x324>
 8004468:	4b58      	ldr	r3, [pc, #352]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	4a57      	ldr	r2, [pc, #348]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	6713      	str	r3, [r2, #112]	; 0x70
 8004474:	4b55      	ldr	r3, [pc, #340]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	4a54      	ldr	r2, [pc, #336]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 800447a:	f023 0304 	bic.w	r3, r3, #4
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fd f94a 	bl	8001720 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448e:	e00a      	b.n	80044a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004490:	f7fd f946 	bl	8001720 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0cb      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	4b49      	ldr	r3, [pc, #292]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0ee      	beq.n	8004490 <HAL_RCC_OscConfig+0x334>
 80044b2:	e014      	b.n	80044de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fd f934 	bl	8001720 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fd f930 	bl	8001720 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e0b5      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	4b3e      	ldr	r3, [pc, #248]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1ee      	bne.n	80044bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e4:	4b39      	ldr	r3, [pc, #228]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	4a38      	ldr	r2, [pc, #224]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80a1 	beq.w	800463c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044fa:	4b34      	ldr	r3, [pc, #208]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b08      	cmp	r3, #8
 8004504:	d05c      	beq.n	80045c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d141      	bne.n	8004592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <HAL_RCC_OscConfig+0x478>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fd f904 	bl	8001720 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451c:	f7fd f900 	bl	8001720 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e087      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	4b27      	ldr	r3, [pc, #156]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	3b01      	subs	r3, #1
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	491b      	ldr	r1, [pc, #108]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_RCC_OscConfig+0x478>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7fd f8d9 	bl	8001720 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004572:	f7fd f8d5 	bl	8001720 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e05c      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x416>
 8004590:	e054      	b.n	800463c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <HAL_RCC_OscConfig+0x478>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fd f8c2 	bl	8001720 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fd f8be 	bl	8001720 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e045      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_OscConfig+0x470>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x444>
 80045be:	e03d      	b.n	800463c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e038      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40007000 	.word	0x40007000
 80045d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x4ec>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d028      	beq.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d121      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d11a      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800460e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004610:	4293      	cmp	r3, r2
 8004612:	d111      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	3b01      	subs	r3, #1
 8004622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d107      	bne.n	8004638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800

0800464c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0cc      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b68      	ldr	r3, [pc, #416]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d90c      	bls.n	8004688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0b8      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a0:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a58      	ldr	r2, [pc, #352]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b8:	4b53      	ldr	r3, [pc, #332]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a52      	ldr	r2, [pc, #328]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b50      	ldr	r3, [pc, #320]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	494d      	ldr	r1, [pc, #308]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d044      	beq.n	800476c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d119      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e07f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d003      	beq.n	800470a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004706:	2b03      	cmp	r3, #3
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e06f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e067      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4934      	ldr	r1, [pc, #208]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800473c:	f7fc fff0 	bl	8001720 <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fc ffec 	bl	8001720 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e04f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 020c 	and.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d1eb      	bne.n	8004744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800476c:	4b25      	ldr	r3, [pc, #148]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d20c      	bcs.n	8004794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b22      	ldr	r3, [pc, #136]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e032      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4916      	ldr	r1, [pc, #88]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	490e      	ldr	r1, [pc, #56]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047d2:	f000 f821 	bl	8004818 <HAL_RCC_GetSysClockFreq>
 80047d6:	4602      	mov	r2, r0
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	490a      	ldr	r1, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	5ccb      	ldrb	r3, [r1, r3]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_ClockConfig+0x1c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fc ff50 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023c00 	.word	0x40023c00
 8004808:	40023800 	.word	0x40023800
 800480c:	08006694 	.word	0x08006694
 8004810:	2000000c 	.word	0x2000000c
 8004814:	20000010 	.word	0x20000010

08004818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481c:	b090      	sub	sp, #64	; 0x40
 800481e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
 8004824:	2300      	movs	r3, #0
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004828:	2300      	movs	r3, #0
 800482a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004830:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCC_GetSysClockFreq+0x180>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b08      	cmp	r3, #8
 800483a:	d00d      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x40>
 800483c:	2b08      	cmp	r3, #8
 800483e:	f200 80a1 	bhi.w	8004984 <HAL_RCC_GetSysClockFreq+0x16c>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x34>
 8004846:	2b04      	cmp	r3, #4
 8004848:	d003      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0x3a>
 800484a:	e09b      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800484c:	4b53      	ldr	r3, [pc, #332]	; (800499c <HAL_RCC_GetSysClockFreq+0x184>)
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004850:	e09b      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004852:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004856:	e098      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004858:	4b4f      	ldr	r3, [pc, #316]	; (8004998 <HAL_RCC_GetSysClockFreq+0x180>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004862:	4b4d      	ldr	r3, [pc, #308]	; (8004998 <HAL_RCC_GetSysClockFreq+0x180>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d028      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486e:	4b4a      	ldr	r3, [pc, #296]	; (8004998 <HAL_RCC_GetSysClockFreq+0x180>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	099b      	lsrs	r3, r3, #6
 8004874:	2200      	movs	r2, #0
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	627a      	str	r2, [r7, #36]	; 0x24
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004880:	2100      	movs	r1, #0
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004884:	fb03 f201 	mul.w	r2, r3, r1
 8004888:	2300      	movs	r3, #0
 800488a:	fb00 f303 	mul.w	r3, r0, r3
 800488e:	4413      	add	r3, r2
 8004890:	4a43      	ldr	r2, [pc, #268]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004892:	fba0 1202 	umull	r1, r2, r0, r2
 8004896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004898:	460a      	mov	r2, r1
 800489a:	62ba      	str	r2, [r7, #40]	; 0x28
 800489c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489e:	4413      	add	r3, r2
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	2200      	movs	r2, #0
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	61fa      	str	r2, [r7, #28]
 80048aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048b2:	f7fb fced 	bl	8000290 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4613      	mov	r3, r2
 80048bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048be:	e053      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c0:	4b35      	ldr	r3, [pc, #212]	; (8004998 <HAL_RCC_GetSysClockFreq+0x180>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	099b      	lsrs	r3, r3, #6
 80048c6:	2200      	movs	r2, #0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	617a      	str	r2, [r7, #20]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048d2:	f04f 0b00 	mov.w	fp, #0
 80048d6:	4652      	mov	r2, sl
 80048d8:	465b      	mov	r3, fp
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	0159      	lsls	r1, r3, #5
 80048e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e8:	0150      	lsls	r0, r2, #5
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	ebb2 080a 	subs.w	r8, r2, sl
 80048f2:	eb63 090b 	sbc.w	r9, r3, fp
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004902:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004906:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800490a:	ebb2 0408 	subs.w	r4, r2, r8
 800490e:	eb63 0509 	sbc.w	r5, r3, r9
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	00eb      	lsls	r3, r5, #3
 800491c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004920:	00e2      	lsls	r2, r4, #3
 8004922:	4614      	mov	r4, r2
 8004924:	461d      	mov	r5, r3
 8004926:	eb14 030a 	adds.w	r3, r4, sl
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	eb45 030b 	adc.w	r3, r5, fp
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800493e:	4629      	mov	r1, r5
 8004940:	028b      	lsls	r3, r1, #10
 8004942:	4621      	mov	r1, r4
 8004944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004948:	4621      	mov	r1, r4
 800494a:	028a      	lsls	r2, r1, #10
 800494c:	4610      	mov	r0, r2
 800494e:	4619      	mov	r1, r3
 8004950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004952:	2200      	movs	r2, #0
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	60fa      	str	r2, [r7, #12]
 8004958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800495c:	f7fb fc98 	bl	8000290 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4613      	mov	r3, r2
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCC_GetSysClockFreq+0x180>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	3301      	adds	r3, #1
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004982:	e002      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetSysClockFreq+0x184>)
 8004986:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800498c:	4618      	mov	r0, r3
 800498e:	3740      	adds	r7, #64	; 0x40
 8004990:	46bd      	mov	sp, r7
 8004992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004996:	bf00      	nop
 8004998:	40023800 	.word	0x40023800
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	017d7840 	.word	0x017d7840

080049a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049aa:	681b      	ldr	r3, [r3, #0]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	2000000c 	.word	0x2000000c

080049bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049c0:	f7ff fff0 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	0a9b      	lsrs	r3, r3, #10
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4903      	ldr	r1, [pc, #12]	; (80049e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40023800 	.word	0x40023800
 80049e0:	080066a4 	.word	0x080066a4

080049e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e07b      	b.n	8004aee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d108      	bne.n	8004a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a06:	d009      	beq.n	8004a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	61da      	str	r2, [r3, #28]
 8004a0e:	e005      	b.n	8004a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fc fc5e 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	ea42 0103 	orr.w	r1, r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	f003 0104 	and.w	r1, r3, #4
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	f003 0210 	and.w	r2, r3, #16
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004adc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_SPI_Transmit_IT+0x20>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e06f      	b.n	8004bf8 <HAL_SPI_Transmit_IT+0x100>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Transmit_IT+0x34>
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b30:	e05d      	b.n	8004bee <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d002      	beq.n	8004b44 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b42:	e054      	b.n	8004bee <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2203      	movs	r2, #3
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	88fa      	ldrh	r2, [r7, #6]
 8004b62:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <HAL_SPI_Transmit_IT+0x10c>)
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
 8004b8a:	e002      	b.n	8004b92 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_SPI_Transmit_IT+0x110>)
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9a:	d10f      	bne.n	8004bbc <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004bca:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d008      	beq.n	8004bec <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e000      	b.n	8004bee <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004bec:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	08004ea3 	.word	0x08004ea3
 8004c08:	08004e5d 	.word	0x08004e5d

08004c0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10f      	bne.n	8004c50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	099b      	lsrs	r3, r3, #6
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
    return;
 8004c4e:	e0d7      	b.n	8004e00 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_SPI_IRQHandler+0x66>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	09db      	lsrs	r3, r3, #7
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
    return;
 8004c70:	e0c6      	b.n	8004e00 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_SPI_IRQHandler+0x8c>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	099b      	lsrs	r3, r3, #6
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	0a1b      	lsrs	r3, r3, #8
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80b4 	beq.w	8004e00 <HAL_SPI_IRQHandler+0x1f4>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80ad 	beq.w	8004e00 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	099b      	lsrs	r3, r3, #6
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d023      	beq.n	8004cfa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d011      	beq.n	8004ce2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f043 0204 	orr.w	r2, r3, #4
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	e00b      	b.n	8004cfa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	693b      	ldr	r3, [r7, #16]
        return;
 8004cf8:	e082      	b.n	8004e00 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d014      	beq.n	8004d30 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0a:	f043 0201 	orr.w	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00c      	beq.n	8004d56 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	f043 0208 	orr.w	r2, r3, #8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04f      	beq.n	8004dfe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d6c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d104      	bne.n	8004d8a <HAL_SPI_IRQHandler+0x17e>
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d034      	beq.n	8004df4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0203 	bic.w	r2, r2, #3
 8004d98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d011      	beq.n	8004dc6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <HAL_SPI_IRQHandler+0x1fc>)
 8004da8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fc fdf7 	bl	80019a2 <HAL_DMA_Abort_IT>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd2:	4a0d      	ldr	r2, [pc, #52]	; (8004e08 <HAL_SPI_IRQHandler+0x1fc>)
 8004dd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fc fde1 	bl	80019a2 <HAL_DMA_Abort_IT>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004df2:	e003      	b.n	8004dfc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f813 	bl	8004e20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004dfa:	e000      	b.n	8004dfe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004dfc:	bf00      	nop
    return;
 8004dfe:	bf00      	nop
  }
}
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	08004e35 	.word	0x08004e35

08004e0c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff ffe6 	bl	8004e20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f8f1 	bl	800507c <SPI_CloseTx_ISR>
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	1c9a      	adds	r2, r3, #2
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f8cf 	bl	800507c <SPI_CloseTx_ISR>
  }
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ef8:	f7fc fc12 	bl	8001720 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f08:	f7fc fc0a 	bl	8001720 <HAL_GetTick>
 8004f0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f0e:	4b39      	ldr	r3, [pc, #228]	; (8004ff4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	015b      	lsls	r3, r3, #5
 8004f14:	0d1b      	lsrs	r3, r3, #20
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1e:	e054      	b.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d050      	beq.n	8004fca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f28:	f7fc fbfa 	bl	8001720 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d902      	bls.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d13d      	bne.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f56:	d111      	bne.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f60:	d004      	beq.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6a:	d107      	bne.n	8004f7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f84:	d10f      	bne.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e017      	b.n	8004fea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d19b      	bne.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c

08004ff8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005004:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <SPI_EndRxTxTransaction+0x7c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1b      	ldr	r2, [pc, #108]	; (8005078 <SPI_EndRxTxTransaction+0x80>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0d5b      	lsrs	r3, r3, #21
 8005010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005022:	d112      	bne.n	800504a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff ff5a 	bl	8004ee8 <SPI_WaitFlagStateUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e00f      	b.n	800506a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3b01      	subs	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d0f2      	beq.n	800504a <SPI_EndRxTxTransaction+0x52>
 8005064:	e000      	b.n	8005068 <SPI_EndRxTxTransaction+0x70>
        break;
 8005066:	bf00      	nop
  }

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	2000000c 	.word	0x2000000c
 8005078:	165e9f81 	.word	0x165e9f81

0800507c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005084:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <SPI_CloseTx_ISR+0xbc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a2c      	ldr	r2, [pc, #176]	; (800513c <SPI_CloseTx_ISR+0xc0>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	0a5b      	lsrs	r3, r3, #9
 8005090:	2264      	movs	r2, #100	; 0x64
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005098:	f7fc fb42 	bl	8001720 <HAL_GetTick>
 800509c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050b0:	e009      	b.n	80050c6 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0eb      	beq.n	800509e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	2164      	movs	r1, #100	; 0x64
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ff8c 	bl	8004ff8 <SPI_EndRxTxTransaction>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fe7d 	bl	8004e20 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005126:	e002      	b.n	800512e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fe6f 	bl	8004e0c <HAL_SPI_TxCpltCallback>
}
 800512e:	bf00      	nop
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	2000000c 	.word	0x2000000c
 800513c:	057619f1 	.word	0x057619f1

08005140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e041      	b.n	80051d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc fa24 	bl	80015b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f000 fa2e 	bl	80055e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d122      	bne.n	800523a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d11b      	bne.n	800523a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0202 	mvn.w	r2, #2
 800520a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f9bf 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 8005226:	e005      	b.n	8005234 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f9b1 	bl	8005590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9c2 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d122      	bne.n	800528e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b04      	cmp	r3, #4
 8005254:	d11b      	bne.n	800528e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0204 	mvn.w	r2, #4
 800525e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f995 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 800527a:	e005      	b.n	8005288 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f987 	bl	8005590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f998 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b08      	cmp	r3, #8
 800529a:	d122      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d11b      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f06f 0208 	mvn.w	r2, #8
 80052b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2204      	movs	r2, #4
 80052b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f96b 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 80052ce:	e005      	b.n	80052dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f95d 	bl	8005590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f96e 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d122      	bne.n	8005336 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d11b      	bne.n	8005336 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0210 	mvn.w	r2, #16
 8005306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2208      	movs	r2, #8
 800530c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f941 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 8005322:	e005      	b.n	8005330 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f933 	bl	8005590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f944 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0201 	mvn.w	r2, #1
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f90d 	bl	800557c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b80      	cmp	r3, #128	; 0x80
 800536e:	d10e      	bne.n	800538e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b80      	cmp	r3, #128	; 0x80
 800537c:	d107      	bne.n	800538e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fabb 	bl	8005904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d10e      	bne.n	80053ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d107      	bne.n	80053ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f909 	bl	80055cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d10e      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f06f 0220 	mvn.w	r2, #32
 80053de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa85 	bl	80058f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_TIM_ConfigClockSource+0x1c>
 8005406:	2302      	movs	r3, #2
 8005408:	e0b4      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x186>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005428:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005430:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005442:	d03e      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0xd4>
 8005444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005448:	f200 8087 	bhi.w	800555a <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005450:	f000 8086 	beq.w	8005560 <HAL_TIM_ConfigClockSource+0x172>
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d87f      	bhi.n	800555a <HAL_TIM_ConfigClockSource+0x16c>
 800545a:	2b70      	cmp	r3, #112	; 0x70
 800545c:	d01a      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0xa6>
 800545e:	2b70      	cmp	r3, #112	; 0x70
 8005460:	d87b      	bhi.n	800555a <HAL_TIM_ConfigClockSource+0x16c>
 8005462:	2b60      	cmp	r3, #96	; 0x60
 8005464:	d050      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0x11a>
 8005466:	2b60      	cmp	r3, #96	; 0x60
 8005468:	d877      	bhi.n	800555a <HAL_TIM_ConfigClockSource+0x16c>
 800546a:	2b50      	cmp	r3, #80	; 0x50
 800546c:	d03c      	beq.n	80054e8 <HAL_TIM_ConfigClockSource+0xfa>
 800546e:	2b50      	cmp	r3, #80	; 0x50
 8005470:	d873      	bhi.n	800555a <HAL_TIM_ConfigClockSource+0x16c>
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d058      	beq.n	8005528 <HAL_TIM_ConfigClockSource+0x13a>
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d86f      	bhi.n	800555a <HAL_TIM_ConfigClockSource+0x16c>
 800547a:	2b30      	cmp	r3, #48	; 0x30
 800547c:	d064      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x15a>
 800547e:	2b30      	cmp	r3, #48	; 0x30
 8005480:	d86b      	bhi.n	800555a <HAL_TIM_ConfigClockSource+0x16c>
 8005482:	2b20      	cmp	r3, #32
 8005484:	d060      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x15a>
 8005486:	2b20      	cmp	r3, #32
 8005488:	d867      	bhi.n	800555a <HAL_TIM_ConfigClockSource+0x16c>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d05c      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x15a>
 800548e:	2b10      	cmp	r3, #16
 8005490:	d05a      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x15a>
 8005492:	e062      	b.n	800555a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6899      	ldr	r1, [r3, #8]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f000 f996 	bl	80057d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
      break;
 80054c0:	e04f      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6899      	ldr	r1, [r3, #8]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f000 f97f 	bl	80057d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e4:	609a      	str	r2, [r3, #8]
      break;
 80054e6:	e03c      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	461a      	mov	r2, r3
 80054f6:	f000 f8f3 	bl	80056e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2150      	movs	r1, #80	; 0x50
 8005500:	4618      	mov	r0, r3
 8005502:	f000 f94c 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005506:	e02c      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6859      	ldr	r1, [r3, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	461a      	mov	r2, r3
 8005516:	f000 f912 	bl	800573e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2160      	movs	r1, #96	; 0x60
 8005520:	4618      	mov	r0, r3
 8005522:	f000 f93c 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005526:	e01c      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6859      	ldr	r1, [r3, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	461a      	mov	r2, r3
 8005536:	f000 f8d3 	bl	80056e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2140      	movs	r1, #64	; 0x40
 8005540:	4618      	mov	r0, r3
 8005542:	f000 f92c 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005546:	e00c      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 f923 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005558:	e003      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
      break;
 800555e:	e000      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005560:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a34      	ldr	r2, [pc, #208]	; (80056c4 <TIM_Base_SetConfig+0xe4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00f      	beq.n	8005618 <TIM_Base_SetConfig+0x38>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d00b      	beq.n	8005618 <TIM_Base_SetConfig+0x38>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a31      	ldr	r2, [pc, #196]	; (80056c8 <TIM_Base_SetConfig+0xe8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_Base_SetConfig+0x38>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a30      	ldr	r2, [pc, #192]	; (80056cc <TIM_Base_SetConfig+0xec>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0x38>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2f      	ldr	r2, [pc, #188]	; (80056d0 <TIM_Base_SetConfig+0xf0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a25      	ldr	r2, [pc, #148]	; (80056c4 <TIM_Base_SetConfig+0xe4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01b      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d017      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a22      	ldr	r2, [pc, #136]	; (80056c8 <TIM_Base_SetConfig+0xe8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a21      	ldr	r2, [pc, #132]	; (80056cc <TIM_Base_SetConfig+0xec>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a20      	ldr	r2, [pc, #128]	; (80056d0 <TIM_Base_SetConfig+0xf0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <TIM_Base_SetConfig+0xf4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <TIM_Base_SetConfig+0xf8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0x8a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <TIM_Base_SetConfig+0xfc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d108      	bne.n	800567c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <TIM_Base_SetConfig+0xe4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d103      	bne.n	80056b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	615a      	str	r2, [r3, #20]
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800

080056e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 030a 	bic.w	r3, r3, #10
 800571c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0210 	bic.w	r2, r3, #16
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	031b      	lsls	r3, r3, #12
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800577a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f043 0307 	orr.w	r3, r3, #7
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	021a      	lsls	r2, r3, #8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	609a      	str	r2, [r3, #8]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005828:	2302      	movs	r3, #2
 800582a:	e050      	b.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d018      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005878:	d013      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00e      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d009      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a13      	ldr	r2, [pc, #76]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d10c      	bne.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40014000 	.word	0x40014000

080058f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <__errno>:
 8005918:	4b01      	ldr	r3, [pc, #4]	; (8005920 <__errno+0x8>)
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000018 	.word	0x20000018

08005924 <__libc_init_array>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4d0d      	ldr	r5, [pc, #52]	; (800595c <__libc_init_array+0x38>)
 8005928:	4c0d      	ldr	r4, [pc, #52]	; (8005960 <__libc_init_array+0x3c>)
 800592a:	1b64      	subs	r4, r4, r5
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	2600      	movs	r6, #0
 8005930:	42a6      	cmp	r6, r4
 8005932:	d109      	bne.n	8005948 <__libc_init_array+0x24>
 8005934:	4d0b      	ldr	r5, [pc, #44]	; (8005964 <__libc_init_array+0x40>)
 8005936:	4c0c      	ldr	r4, [pc, #48]	; (8005968 <__libc_init_array+0x44>)
 8005938:	f000 fc8e 	bl	8006258 <_init>
 800593c:	1b64      	subs	r4, r4, r5
 800593e:	10a4      	asrs	r4, r4, #2
 8005940:	2600      	movs	r6, #0
 8005942:	42a6      	cmp	r6, r4
 8005944:	d105      	bne.n	8005952 <__libc_init_array+0x2e>
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	f855 3b04 	ldr.w	r3, [r5], #4
 800594c:	4798      	blx	r3
 800594e:	3601      	adds	r6, #1
 8005950:	e7ee      	b.n	8005930 <__libc_init_array+0xc>
 8005952:	f855 3b04 	ldr.w	r3, [r5], #4
 8005956:	4798      	blx	r3
 8005958:	3601      	adds	r6, #1
 800595a:	e7f2      	b.n	8005942 <__libc_init_array+0x1e>
 800595c:	080066e8 	.word	0x080066e8
 8005960:	080066e8 	.word	0x080066e8
 8005964:	080066e8 	.word	0x080066e8
 8005968:	080066ec 	.word	0x080066ec

0800596c <memset>:
 800596c:	4402      	add	r2, r0
 800596e:	4603      	mov	r3, r0
 8005970:	4293      	cmp	r3, r2
 8005972:	d100      	bne.n	8005976 <memset+0xa>
 8005974:	4770      	bx	lr
 8005976:	f803 1b01 	strb.w	r1, [r3], #1
 800597a:	e7f9      	b.n	8005970 <memset+0x4>

0800597c <siprintf>:
 800597c:	b40e      	push	{r1, r2, r3}
 800597e:	b500      	push	{lr}
 8005980:	b09c      	sub	sp, #112	; 0x70
 8005982:	ab1d      	add	r3, sp, #116	; 0x74
 8005984:	9002      	str	r0, [sp, #8]
 8005986:	9006      	str	r0, [sp, #24]
 8005988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800598c:	4809      	ldr	r0, [pc, #36]	; (80059b4 <siprintf+0x38>)
 800598e:	9107      	str	r1, [sp, #28]
 8005990:	9104      	str	r1, [sp, #16]
 8005992:	4909      	ldr	r1, [pc, #36]	; (80059b8 <siprintf+0x3c>)
 8005994:	f853 2b04 	ldr.w	r2, [r3], #4
 8005998:	9105      	str	r1, [sp, #20]
 800599a:	6800      	ldr	r0, [r0, #0]
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	a902      	add	r1, sp, #8
 80059a0:	f000 f868 	bl	8005a74 <_svfiprintf_r>
 80059a4:	9b02      	ldr	r3, [sp, #8]
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	b01c      	add	sp, #112	; 0x70
 80059ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b0:	b003      	add	sp, #12
 80059b2:	4770      	bx	lr
 80059b4:	20000018 	.word	0x20000018
 80059b8:	ffff0208 	.word	0xffff0208

080059bc <__ssputs_r>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	688e      	ldr	r6, [r1, #8]
 80059c2:	429e      	cmp	r6, r3
 80059c4:	4682      	mov	sl, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	4690      	mov	r8, r2
 80059ca:	461f      	mov	r7, r3
 80059cc:	d838      	bhi.n	8005a40 <__ssputs_r+0x84>
 80059ce:	898a      	ldrh	r2, [r1, #12]
 80059d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059d4:	d032      	beq.n	8005a3c <__ssputs_r+0x80>
 80059d6:	6825      	ldr	r5, [r4, #0]
 80059d8:	6909      	ldr	r1, [r1, #16]
 80059da:	eba5 0901 	sub.w	r9, r5, r1
 80059de:	6965      	ldr	r5, [r4, #20]
 80059e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059e8:	3301      	adds	r3, #1
 80059ea:	444b      	add	r3, r9
 80059ec:	106d      	asrs	r5, r5, #1
 80059ee:	429d      	cmp	r5, r3
 80059f0:	bf38      	it	cc
 80059f2:	461d      	movcc	r5, r3
 80059f4:	0553      	lsls	r3, r2, #21
 80059f6:	d531      	bpl.n	8005a5c <__ssputs_r+0xa0>
 80059f8:	4629      	mov	r1, r5
 80059fa:	f000 fb63 	bl	80060c4 <_malloc_r>
 80059fe:	4606      	mov	r6, r0
 8005a00:	b950      	cbnz	r0, 8005a18 <__ssputs_r+0x5c>
 8005a02:	230c      	movs	r3, #12
 8005a04:	f8ca 3000 	str.w	r3, [sl]
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	6921      	ldr	r1, [r4, #16]
 8005a1a:	464a      	mov	r2, r9
 8005a1c:	f000 fabe 	bl	8005f9c <memcpy>
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	6126      	str	r6, [r4, #16]
 8005a2e:	6165      	str	r5, [r4, #20]
 8005a30:	444e      	add	r6, r9
 8005a32:	eba5 0509 	sub.w	r5, r5, r9
 8005a36:	6026      	str	r6, [r4, #0]
 8005a38:	60a5      	str	r5, [r4, #8]
 8005a3a:	463e      	mov	r6, r7
 8005a3c:	42be      	cmp	r6, r7
 8005a3e:	d900      	bls.n	8005a42 <__ssputs_r+0x86>
 8005a40:	463e      	mov	r6, r7
 8005a42:	6820      	ldr	r0, [r4, #0]
 8005a44:	4632      	mov	r2, r6
 8005a46:	4641      	mov	r1, r8
 8005a48:	f000 fab6 	bl	8005fb8 <memmove>
 8005a4c:	68a3      	ldr	r3, [r4, #8]
 8005a4e:	1b9b      	subs	r3, r3, r6
 8005a50:	60a3      	str	r3, [r4, #8]
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	4433      	add	r3, r6
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7db      	b.n	8005a14 <__ssputs_r+0x58>
 8005a5c:	462a      	mov	r2, r5
 8005a5e:	f000 fba5 	bl	80061ac <_realloc_r>
 8005a62:	4606      	mov	r6, r0
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d1e1      	bne.n	8005a2c <__ssputs_r+0x70>
 8005a68:	6921      	ldr	r1, [r4, #16]
 8005a6a:	4650      	mov	r0, sl
 8005a6c:	f000 fabe 	bl	8005fec <_free_r>
 8005a70:	e7c7      	b.n	8005a02 <__ssputs_r+0x46>
	...

08005a74 <_svfiprintf_r>:
 8005a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	4698      	mov	r8, r3
 8005a7a:	898b      	ldrh	r3, [r1, #12]
 8005a7c:	061b      	lsls	r3, r3, #24
 8005a7e:	b09d      	sub	sp, #116	; 0x74
 8005a80:	4607      	mov	r7, r0
 8005a82:	460d      	mov	r5, r1
 8005a84:	4614      	mov	r4, r2
 8005a86:	d50e      	bpl.n	8005aa6 <_svfiprintf_r+0x32>
 8005a88:	690b      	ldr	r3, [r1, #16]
 8005a8a:	b963      	cbnz	r3, 8005aa6 <_svfiprintf_r+0x32>
 8005a8c:	2140      	movs	r1, #64	; 0x40
 8005a8e:	f000 fb19 	bl	80060c4 <_malloc_r>
 8005a92:	6028      	str	r0, [r5, #0]
 8005a94:	6128      	str	r0, [r5, #16]
 8005a96:	b920      	cbnz	r0, 8005aa2 <_svfiprintf_r+0x2e>
 8005a98:	230c      	movs	r3, #12
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	e0d1      	b.n	8005c46 <_svfiprintf_r+0x1d2>
 8005aa2:	2340      	movs	r3, #64	; 0x40
 8005aa4:	616b      	str	r3, [r5, #20]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aaa:	2320      	movs	r3, #32
 8005aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ab4:	2330      	movs	r3, #48	; 0x30
 8005ab6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c60 <_svfiprintf_r+0x1ec>
 8005aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005abe:	f04f 0901 	mov.w	r9, #1
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	469a      	mov	sl, r3
 8005ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aca:	b10a      	cbz	r2, 8005ad0 <_svfiprintf_r+0x5c>
 8005acc:	2a25      	cmp	r2, #37	; 0x25
 8005ace:	d1f9      	bne.n	8005ac4 <_svfiprintf_r+0x50>
 8005ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ad4:	d00b      	beq.n	8005aee <_svfiprintf_r+0x7a>
 8005ad6:	465b      	mov	r3, fp
 8005ad8:	4622      	mov	r2, r4
 8005ada:	4629      	mov	r1, r5
 8005adc:	4638      	mov	r0, r7
 8005ade:	f7ff ff6d 	bl	80059bc <__ssputs_r>
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f000 80aa 	beq.w	8005c3c <_svfiprintf_r+0x1c8>
 8005ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aea:	445a      	add	r2, fp
 8005aec:	9209      	str	r2, [sp, #36]	; 0x24
 8005aee:	f89a 3000 	ldrb.w	r3, [sl]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80a2 	beq.w	8005c3c <_svfiprintf_r+0x1c8>
 8005af8:	2300      	movs	r3, #0
 8005afa:	f04f 32ff 	mov.w	r2, #4294967295
 8005afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b02:	f10a 0a01 	add.w	sl, sl, #1
 8005b06:	9304      	str	r3, [sp, #16]
 8005b08:	9307      	str	r3, [sp, #28]
 8005b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8005b10:	4654      	mov	r4, sl
 8005b12:	2205      	movs	r2, #5
 8005b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b18:	4851      	ldr	r0, [pc, #324]	; (8005c60 <_svfiprintf_r+0x1ec>)
 8005b1a:	f7fa fb69 	bl	80001f0 <memchr>
 8005b1e:	9a04      	ldr	r2, [sp, #16]
 8005b20:	b9d8      	cbnz	r0, 8005b5a <_svfiprintf_r+0xe6>
 8005b22:	06d0      	lsls	r0, r2, #27
 8005b24:	bf44      	itt	mi
 8005b26:	2320      	movmi	r3, #32
 8005b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b2c:	0711      	lsls	r1, r2, #28
 8005b2e:	bf44      	itt	mi
 8005b30:	232b      	movmi	r3, #43	; 0x2b
 8005b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b36:	f89a 3000 	ldrb.w	r3, [sl]
 8005b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b3c:	d015      	beq.n	8005b6a <_svfiprintf_r+0xf6>
 8005b3e:	9a07      	ldr	r2, [sp, #28]
 8005b40:	4654      	mov	r4, sl
 8005b42:	2000      	movs	r0, #0
 8005b44:	f04f 0c0a 	mov.w	ip, #10
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b4e:	3b30      	subs	r3, #48	; 0x30
 8005b50:	2b09      	cmp	r3, #9
 8005b52:	d94e      	bls.n	8005bf2 <_svfiprintf_r+0x17e>
 8005b54:	b1b0      	cbz	r0, 8005b84 <_svfiprintf_r+0x110>
 8005b56:	9207      	str	r2, [sp, #28]
 8005b58:	e014      	b.n	8005b84 <_svfiprintf_r+0x110>
 8005b5a:	eba0 0308 	sub.w	r3, r0, r8
 8005b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b62:	4313      	orrs	r3, r2
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	46a2      	mov	sl, r4
 8005b68:	e7d2      	b.n	8005b10 <_svfiprintf_r+0x9c>
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	1d19      	adds	r1, r3, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	9103      	str	r1, [sp, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bfbb      	ittet	lt
 8005b76:	425b      	neglt	r3, r3
 8005b78:	f042 0202 	orrlt.w	r2, r2, #2
 8005b7c:	9307      	strge	r3, [sp, #28]
 8005b7e:	9307      	strlt	r3, [sp, #28]
 8005b80:	bfb8      	it	lt
 8005b82:	9204      	strlt	r2, [sp, #16]
 8005b84:	7823      	ldrb	r3, [r4, #0]
 8005b86:	2b2e      	cmp	r3, #46	; 0x2e
 8005b88:	d10c      	bne.n	8005ba4 <_svfiprintf_r+0x130>
 8005b8a:	7863      	ldrb	r3, [r4, #1]
 8005b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8e:	d135      	bne.n	8005bfc <_svfiprintf_r+0x188>
 8005b90:	9b03      	ldr	r3, [sp, #12]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	9203      	str	r2, [sp, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bfb8      	it	lt
 8005b9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ba0:	3402      	adds	r4, #2
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c70 <_svfiprintf_r+0x1fc>
 8005ba8:	7821      	ldrb	r1, [r4, #0]
 8005baa:	2203      	movs	r2, #3
 8005bac:	4650      	mov	r0, sl
 8005bae:	f7fa fb1f 	bl	80001f0 <memchr>
 8005bb2:	b140      	cbz	r0, 8005bc6 <_svfiprintf_r+0x152>
 8005bb4:	2340      	movs	r3, #64	; 0x40
 8005bb6:	eba0 000a 	sub.w	r0, r0, sl
 8005bba:	fa03 f000 	lsl.w	r0, r3, r0
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	4303      	orrs	r3, r0
 8005bc2:	3401      	adds	r4, #1
 8005bc4:	9304      	str	r3, [sp, #16]
 8005bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bca:	4826      	ldr	r0, [pc, #152]	; (8005c64 <_svfiprintf_r+0x1f0>)
 8005bcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bd0:	2206      	movs	r2, #6
 8005bd2:	f7fa fb0d 	bl	80001f0 <memchr>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d038      	beq.n	8005c4c <_svfiprintf_r+0x1d8>
 8005bda:	4b23      	ldr	r3, [pc, #140]	; (8005c68 <_svfiprintf_r+0x1f4>)
 8005bdc:	bb1b      	cbnz	r3, 8005c26 <_svfiprintf_r+0x1b2>
 8005bde:	9b03      	ldr	r3, [sp, #12]
 8005be0:	3307      	adds	r3, #7
 8005be2:	f023 0307 	bic.w	r3, r3, #7
 8005be6:	3308      	adds	r3, #8
 8005be8:	9303      	str	r3, [sp, #12]
 8005bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bec:	4433      	add	r3, r6
 8005bee:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf0:	e767      	b.n	8005ac2 <_svfiprintf_r+0x4e>
 8005bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	e7a5      	b.n	8005b48 <_svfiprintf_r+0xd4>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	3401      	adds	r4, #1
 8005c00:	9305      	str	r3, [sp, #20]
 8005c02:	4619      	mov	r1, r3
 8005c04:	f04f 0c0a 	mov.w	ip, #10
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c0e:	3a30      	subs	r2, #48	; 0x30
 8005c10:	2a09      	cmp	r2, #9
 8005c12:	d903      	bls.n	8005c1c <_svfiprintf_r+0x1a8>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0c5      	beq.n	8005ba4 <_svfiprintf_r+0x130>
 8005c18:	9105      	str	r1, [sp, #20]
 8005c1a:	e7c3      	b.n	8005ba4 <_svfiprintf_r+0x130>
 8005c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c20:	4604      	mov	r4, r0
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7f0      	b.n	8005c08 <_svfiprintf_r+0x194>
 8005c26:	ab03      	add	r3, sp, #12
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	462a      	mov	r2, r5
 8005c2c:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <_svfiprintf_r+0x1f8>)
 8005c2e:	a904      	add	r1, sp, #16
 8005c30:	4638      	mov	r0, r7
 8005c32:	f3af 8000 	nop.w
 8005c36:	1c42      	adds	r2, r0, #1
 8005c38:	4606      	mov	r6, r0
 8005c3a:	d1d6      	bne.n	8005bea <_svfiprintf_r+0x176>
 8005c3c:	89ab      	ldrh	r3, [r5, #12]
 8005c3e:	065b      	lsls	r3, r3, #25
 8005c40:	f53f af2c 	bmi.w	8005a9c <_svfiprintf_r+0x28>
 8005c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c46:	b01d      	add	sp, #116	; 0x74
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4c:	ab03      	add	r3, sp, #12
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	462a      	mov	r2, r5
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <_svfiprintf_r+0x1f8>)
 8005c54:	a904      	add	r1, sp, #16
 8005c56:	4638      	mov	r0, r7
 8005c58:	f000 f87a 	bl	8005d50 <_printf_i>
 8005c5c:	e7eb      	b.n	8005c36 <_svfiprintf_r+0x1c2>
 8005c5e:	bf00      	nop
 8005c60:	080066ac 	.word	0x080066ac
 8005c64:	080066b6 	.word	0x080066b6
 8005c68:	00000000 	.word	0x00000000
 8005c6c:	080059bd 	.word	0x080059bd
 8005c70:	080066b2 	.word	0x080066b2

08005c74 <_printf_common>:
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	4616      	mov	r6, r2
 8005c7a:	4699      	mov	r9, r3
 8005c7c:	688a      	ldr	r2, [r1, #8]
 8005c7e:	690b      	ldr	r3, [r1, #16]
 8005c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bfb8      	it	lt
 8005c88:	4613      	movlt	r3, r2
 8005c8a:	6033      	str	r3, [r6, #0]
 8005c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c90:	4607      	mov	r7, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	b10a      	cbz	r2, 8005c9a <_printf_common+0x26>
 8005c96:	3301      	adds	r3, #1
 8005c98:	6033      	str	r3, [r6, #0]
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	0699      	lsls	r1, r3, #26
 8005c9e:	bf42      	ittt	mi
 8005ca0:	6833      	ldrmi	r3, [r6, #0]
 8005ca2:	3302      	addmi	r3, #2
 8005ca4:	6033      	strmi	r3, [r6, #0]
 8005ca6:	6825      	ldr	r5, [r4, #0]
 8005ca8:	f015 0506 	ands.w	r5, r5, #6
 8005cac:	d106      	bne.n	8005cbc <_printf_common+0x48>
 8005cae:	f104 0a19 	add.w	sl, r4, #25
 8005cb2:	68e3      	ldr	r3, [r4, #12]
 8005cb4:	6832      	ldr	r2, [r6, #0]
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	42ab      	cmp	r3, r5
 8005cba:	dc26      	bgt.n	8005d0a <_printf_common+0x96>
 8005cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc0:	1e13      	subs	r3, r2, #0
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	bf18      	it	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	0692      	lsls	r2, r2, #26
 8005cca:	d42b      	bmi.n	8005d24 <_printf_common+0xb0>
 8005ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	47c0      	blx	r8
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d01e      	beq.n	8005d18 <_printf_common+0xa4>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	68e5      	ldr	r5, [r4, #12]
 8005cde:	6832      	ldr	r2, [r6, #0]
 8005ce0:	f003 0306 	and.w	r3, r3, #6
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	bf08      	it	eq
 8005ce8:	1aad      	subeq	r5, r5, r2
 8005cea:	68a3      	ldr	r3, [r4, #8]
 8005cec:	6922      	ldr	r2, [r4, #16]
 8005cee:	bf0c      	ite	eq
 8005cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf4:	2500      	movne	r5, #0
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	bfc4      	itt	gt
 8005cfa:	1a9b      	subgt	r3, r3, r2
 8005cfc:	18ed      	addgt	r5, r5, r3
 8005cfe:	2600      	movs	r6, #0
 8005d00:	341a      	adds	r4, #26
 8005d02:	42b5      	cmp	r5, r6
 8005d04:	d11a      	bne.n	8005d3c <_printf_common+0xc8>
 8005d06:	2000      	movs	r0, #0
 8005d08:	e008      	b.n	8005d1c <_printf_common+0xa8>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4638      	mov	r0, r7
 8005d12:	47c0      	blx	r8
 8005d14:	3001      	adds	r0, #1
 8005d16:	d103      	bne.n	8005d20 <_printf_common+0xac>
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d20:	3501      	adds	r5, #1
 8005d22:	e7c6      	b.n	8005cb2 <_printf_common+0x3e>
 8005d24:	18e1      	adds	r1, r4, r3
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	2030      	movs	r0, #48	; 0x30
 8005d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d2e:	4422      	add	r2, r4
 8005d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d38:	3302      	adds	r3, #2
 8005d3a:	e7c7      	b.n	8005ccc <_printf_common+0x58>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4622      	mov	r2, r4
 8005d40:	4649      	mov	r1, r9
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c0      	blx	r8
 8005d46:	3001      	adds	r0, #1
 8005d48:	d0e6      	beq.n	8005d18 <_printf_common+0xa4>
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	e7d9      	b.n	8005d02 <_printf_common+0x8e>
	...

08005d50 <_printf_i>:
 8005d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d54:	7e0f      	ldrb	r7, [r1, #24]
 8005d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d58:	2f78      	cmp	r7, #120	; 0x78
 8005d5a:	4691      	mov	r9, r2
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	469a      	mov	sl, r3
 8005d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d66:	d807      	bhi.n	8005d78 <_printf_i+0x28>
 8005d68:	2f62      	cmp	r7, #98	; 0x62
 8005d6a:	d80a      	bhi.n	8005d82 <_printf_i+0x32>
 8005d6c:	2f00      	cmp	r7, #0
 8005d6e:	f000 80d8 	beq.w	8005f22 <_printf_i+0x1d2>
 8005d72:	2f58      	cmp	r7, #88	; 0x58
 8005d74:	f000 80a3 	beq.w	8005ebe <_printf_i+0x16e>
 8005d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d80:	e03a      	b.n	8005df8 <_printf_i+0xa8>
 8005d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d86:	2b15      	cmp	r3, #21
 8005d88:	d8f6      	bhi.n	8005d78 <_printf_i+0x28>
 8005d8a:	a101      	add	r1, pc, #4	; (adr r1, 8005d90 <_printf_i+0x40>)
 8005d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d90:	08005de9 	.word	0x08005de9
 8005d94:	08005dfd 	.word	0x08005dfd
 8005d98:	08005d79 	.word	0x08005d79
 8005d9c:	08005d79 	.word	0x08005d79
 8005da0:	08005d79 	.word	0x08005d79
 8005da4:	08005d79 	.word	0x08005d79
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005d79 	.word	0x08005d79
 8005db0:	08005d79 	.word	0x08005d79
 8005db4:	08005d79 	.word	0x08005d79
 8005db8:	08005d79 	.word	0x08005d79
 8005dbc:	08005f09 	.word	0x08005f09
 8005dc0:	08005e2d 	.word	0x08005e2d
 8005dc4:	08005eeb 	.word	0x08005eeb
 8005dc8:	08005d79 	.word	0x08005d79
 8005dcc:	08005d79 	.word	0x08005d79
 8005dd0:	08005f2b 	.word	0x08005f2b
 8005dd4:	08005d79 	.word	0x08005d79
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005d79 	.word	0x08005d79
 8005de0:	08005d79 	.word	0x08005d79
 8005de4:	08005ef3 	.word	0x08005ef3
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	1d1a      	adds	r2, r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	602a      	str	r2, [r5, #0]
 8005df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0a3      	b.n	8005f44 <_printf_i+0x1f4>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	6829      	ldr	r1, [r5, #0]
 8005e00:	0606      	lsls	r6, r0, #24
 8005e02:	f101 0304 	add.w	r3, r1, #4
 8005e06:	d50a      	bpl.n	8005e1e <_printf_i+0xce>
 8005e08:	680e      	ldr	r6, [r1, #0]
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	2e00      	cmp	r6, #0
 8005e0e:	da03      	bge.n	8005e18 <_printf_i+0xc8>
 8005e10:	232d      	movs	r3, #45	; 0x2d
 8005e12:	4276      	negs	r6, r6
 8005e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e18:	485e      	ldr	r0, [pc, #376]	; (8005f94 <_printf_i+0x244>)
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	e019      	b.n	8005e52 <_printf_i+0x102>
 8005e1e:	680e      	ldr	r6, [r1, #0]
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e26:	bf18      	it	ne
 8005e28:	b236      	sxthne	r6, r6
 8005e2a:	e7ef      	b.n	8005e0c <_printf_i+0xbc>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	6820      	ldr	r0, [r4, #0]
 8005e30:	1d19      	adds	r1, r3, #4
 8005e32:	6029      	str	r1, [r5, #0]
 8005e34:	0601      	lsls	r1, r0, #24
 8005e36:	d501      	bpl.n	8005e3c <_printf_i+0xec>
 8005e38:	681e      	ldr	r6, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <_printf_i+0xf2>
 8005e3c:	0646      	lsls	r6, r0, #25
 8005e3e:	d5fb      	bpl.n	8005e38 <_printf_i+0xe8>
 8005e40:	881e      	ldrh	r6, [r3, #0]
 8005e42:	4854      	ldr	r0, [pc, #336]	; (8005f94 <_printf_i+0x244>)
 8005e44:	2f6f      	cmp	r7, #111	; 0x6f
 8005e46:	bf0c      	ite	eq
 8005e48:	2308      	moveq	r3, #8
 8005e4a:	230a      	movne	r3, #10
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e52:	6865      	ldr	r5, [r4, #4]
 8005e54:	60a5      	str	r5, [r4, #8]
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	bfa2      	ittt	ge
 8005e5a:	6821      	ldrge	r1, [r4, #0]
 8005e5c:	f021 0104 	bicge.w	r1, r1, #4
 8005e60:	6021      	strge	r1, [r4, #0]
 8005e62:	b90e      	cbnz	r6, 8005e68 <_printf_i+0x118>
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	d04d      	beq.n	8005f04 <_printf_i+0x1b4>
 8005e68:	4615      	mov	r5, r2
 8005e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e72:	5dc7      	ldrb	r7, [r0, r7]
 8005e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e78:	4637      	mov	r7, r6
 8005e7a:	42bb      	cmp	r3, r7
 8005e7c:	460e      	mov	r6, r1
 8005e7e:	d9f4      	bls.n	8005e6a <_printf_i+0x11a>
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d10b      	bne.n	8005e9c <_printf_i+0x14c>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07de      	lsls	r6, r3, #31
 8005e88:	d508      	bpl.n	8005e9c <_printf_i+0x14c>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	6861      	ldr	r1, [r4, #4]
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	bfde      	ittt	le
 8005e92:	2330      	movle	r3, #48	; 0x30
 8005e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e9c:	1b52      	subs	r2, r2, r5
 8005e9e:	6122      	str	r2, [r4, #16]
 8005ea0:	f8cd a000 	str.w	sl, [sp]
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	aa03      	add	r2, sp, #12
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4640      	mov	r0, r8
 8005eac:	f7ff fee2 	bl	8005c74 <_printf_common>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d14c      	bne.n	8005f4e <_printf_i+0x1fe>
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	b004      	add	sp, #16
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebe:	4835      	ldr	r0, [pc, #212]	; (8005f94 <_printf_i+0x244>)
 8005ec0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ec4:	6829      	ldr	r1, [r5, #0]
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ecc:	6029      	str	r1, [r5, #0]
 8005ece:	061d      	lsls	r5, r3, #24
 8005ed0:	d514      	bpl.n	8005efc <_printf_i+0x1ac>
 8005ed2:	07df      	lsls	r7, r3, #31
 8005ed4:	bf44      	itt	mi
 8005ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eda:	6023      	strmi	r3, [r4, #0]
 8005edc:	b91e      	cbnz	r6, 8005ee6 <_printf_i+0x196>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f023 0320 	bic.w	r3, r3, #32
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	2310      	movs	r3, #16
 8005ee8:	e7b0      	b.n	8005e4c <_printf_i+0xfc>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	f043 0320 	orr.w	r3, r3, #32
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	2378      	movs	r3, #120	; 0x78
 8005ef4:	4828      	ldr	r0, [pc, #160]	; (8005f98 <_printf_i+0x248>)
 8005ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005efa:	e7e3      	b.n	8005ec4 <_printf_i+0x174>
 8005efc:	0659      	lsls	r1, r3, #25
 8005efe:	bf48      	it	mi
 8005f00:	b2b6      	uxthmi	r6, r6
 8005f02:	e7e6      	b.n	8005ed2 <_printf_i+0x182>
 8005f04:	4615      	mov	r5, r2
 8005f06:	e7bb      	b.n	8005e80 <_printf_i+0x130>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	6826      	ldr	r6, [r4, #0]
 8005f0c:	6961      	ldr	r1, [r4, #20]
 8005f0e:	1d18      	adds	r0, r3, #4
 8005f10:	6028      	str	r0, [r5, #0]
 8005f12:	0635      	lsls	r5, r6, #24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	d501      	bpl.n	8005f1c <_printf_i+0x1cc>
 8005f18:	6019      	str	r1, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <_printf_i+0x1d2>
 8005f1c:	0670      	lsls	r0, r6, #25
 8005f1e:	d5fb      	bpl.n	8005f18 <_printf_i+0x1c8>
 8005f20:	8019      	strh	r1, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	4615      	mov	r5, r2
 8005f28:	e7ba      	b.n	8005ea0 <_printf_i+0x150>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	602a      	str	r2, [r5, #0]
 8005f30:	681d      	ldr	r5, [r3, #0]
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4628      	mov	r0, r5
 8005f38:	f7fa f95a 	bl	80001f0 <memchr>
 8005f3c:	b108      	cbz	r0, 8005f42 <_printf_i+0x1f2>
 8005f3e:	1b40      	subs	r0, r0, r5
 8005f40:	6060      	str	r0, [r4, #4]
 8005f42:	6863      	ldr	r3, [r4, #4]
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	2300      	movs	r3, #0
 8005f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4c:	e7a8      	b.n	8005ea0 <_printf_i+0x150>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4649      	mov	r1, r9
 8005f54:	4640      	mov	r0, r8
 8005f56:	47d0      	blx	sl
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d0ab      	beq.n	8005eb4 <_printf_i+0x164>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	079b      	lsls	r3, r3, #30
 8005f60:	d413      	bmi.n	8005f8a <_printf_i+0x23a>
 8005f62:	68e0      	ldr	r0, [r4, #12]
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	4298      	cmp	r0, r3
 8005f68:	bfb8      	it	lt
 8005f6a:	4618      	movlt	r0, r3
 8005f6c:	e7a4      	b.n	8005eb8 <_printf_i+0x168>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4632      	mov	r2, r6
 8005f72:	4649      	mov	r1, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	47d0      	blx	sl
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d09b      	beq.n	8005eb4 <_printf_i+0x164>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	68e3      	ldr	r3, [r4, #12]
 8005f80:	9903      	ldr	r1, [sp, #12]
 8005f82:	1a5b      	subs	r3, r3, r1
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	dcf2      	bgt.n	8005f6e <_printf_i+0x21e>
 8005f88:	e7eb      	b.n	8005f62 <_printf_i+0x212>
 8005f8a:	2500      	movs	r5, #0
 8005f8c:	f104 0619 	add.w	r6, r4, #25
 8005f90:	e7f5      	b.n	8005f7e <_printf_i+0x22e>
 8005f92:	bf00      	nop
 8005f94:	080066bd 	.word	0x080066bd
 8005f98:	080066ce 	.word	0x080066ce

08005f9c <memcpy>:
 8005f9c:	440a      	add	r2, r1
 8005f9e:	4291      	cmp	r1, r2
 8005fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fa4:	d100      	bne.n	8005fa8 <memcpy+0xc>
 8005fa6:	4770      	bx	lr
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fb2:	4291      	cmp	r1, r2
 8005fb4:	d1f9      	bne.n	8005faa <memcpy+0xe>
 8005fb6:	bd10      	pop	{r4, pc}

08005fb8 <memmove>:
 8005fb8:	4288      	cmp	r0, r1
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	eb01 0402 	add.w	r4, r1, r2
 8005fc0:	d902      	bls.n	8005fc8 <memmove+0x10>
 8005fc2:	4284      	cmp	r4, r0
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	d807      	bhi.n	8005fd8 <memmove+0x20>
 8005fc8:	1e43      	subs	r3, r0, #1
 8005fca:	42a1      	cmp	r1, r4
 8005fcc:	d008      	beq.n	8005fe0 <memmove+0x28>
 8005fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fd6:	e7f8      	b.n	8005fca <memmove+0x12>
 8005fd8:	4402      	add	r2, r0
 8005fda:	4601      	mov	r1, r0
 8005fdc:	428a      	cmp	r2, r1
 8005fde:	d100      	bne.n	8005fe2 <memmove+0x2a>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fea:	e7f7      	b.n	8005fdc <memmove+0x24>

08005fec <_free_r>:
 8005fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fee:	2900      	cmp	r1, #0
 8005ff0:	d044      	beq.n	800607c <_free_r+0x90>
 8005ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff6:	9001      	str	r0, [sp, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8005ffe:	bfb8      	it	lt
 8006000:	18e4      	addlt	r4, r4, r3
 8006002:	f000 f913 	bl	800622c <__malloc_lock>
 8006006:	4a1e      	ldr	r2, [pc, #120]	; (8006080 <_free_r+0x94>)
 8006008:	9801      	ldr	r0, [sp, #4]
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	b933      	cbnz	r3, 800601c <_free_r+0x30>
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	6014      	str	r4, [r2, #0]
 8006012:	b003      	add	sp, #12
 8006014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006018:	f000 b90e 	b.w	8006238 <__malloc_unlock>
 800601c:	42a3      	cmp	r3, r4
 800601e:	d908      	bls.n	8006032 <_free_r+0x46>
 8006020:	6825      	ldr	r5, [r4, #0]
 8006022:	1961      	adds	r1, r4, r5
 8006024:	428b      	cmp	r3, r1
 8006026:	bf01      	itttt	eq
 8006028:	6819      	ldreq	r1, [r3, #0]
 800602a:	685b      	ldreq	r3, [r3, #4]
 800602c:	1949      	addeq	r1, r1, r5
 800602e:	6021      	streq	r1, [r4, #0]
 8006030:	e7ed      	b.n	800600e <_free_r+0x22>
 8006032:	461a      	mov	r2, r3
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	b10b      	cbz	r3, 800603c <_free_r+0x50>
 8006038:	42a3      	cmp	r3, r4
 800603a:	d9fa      	bls.n	8006032 <_free_r+0x46>
 800603c:	6811      	ldr	r1, [r2, #0]
 800603e:	1855      	adds	r5, r2, r1
 8006040:	42a5      	cmp	r5, r4
 8006042:	d10b      	bne.n	800605c <_free_r+0x70>
 8006044:	6824      	ldr	r4, [r4, #0]
 8006046:	4421      	add	r1, r4
 8006048:	1854      	adds	r4, r2, r1
 800604a:	42a3      	cmp	r3, r4
 800604c:	6011      	str	r1, [r2, #0]
 800604e:	d1e0      	bne.n	8006012 <_free_r+0x26>
 8006050:	681c      	ldr	r4, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	6053      	str	r3, [r2, #4]
 8006056:	4421      	add	r1, r4
 8006058:	6011      	str	r1, [r2, #0]
 800605a:	e7da      	b.n	8006012 <_free_r+0x26>
 800605c:	d902      	bls.n	8006064 <_free_r+0x78>
 800605e:	230c      	movs	r3, #12
 8006060:	6003      	str	r3, [r0, #0]
 8006062:	e7d6      	b.n	8006012 <_free_r+0x26>
 8006064:	6825      	ldr	r5, [r4, #0]
 8006066:	1961      	adds	r1, r4, r5
 8006068:	428b      	cmp	r3, r1
 800606a:	bf04      	itt	eq
 800606c:	6819      	ldreq	r1, [r3, #0]
 800606e:	685b      	ldreq	r3, [r3, #4]
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	bf04      	itt	eq
 8006074:	1949      	addeq	r1, r1, r5
 8006076:	6021      	streq	r1, [r4, #0]
 8006078:	6054      	str	r4, [r2, #4]
 800607a:	e7ca      	b.n	8006012 <_free_r+0x26>
 800607c:	b003      	add	sp, #12
 800607e:	bd30      	pop	{r4, r5, pc}
 8006080:	20000628 	.word	0x20000628

08006084 <sbrk_aligned>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	4e0e      	ldr	r6, [pc, #56]	; (80060c0 <sbrk_aligned+0x3c>)
 8006088:	460c      	mov	r4, r1
 800608a:	6831      	ldr	r1, [r6, #0]
 800608c:	4605      	mov	r5, r0
 800608e:	b911      	cbnz	r1, 8006096 <sbrk_aligned+0x12>
 8006090:	f000 f8bc 	bl	800620c <_sbrk_r>
 8006094:	6030      	str	r0, [r6, #0]
 8006096:	4621      	mov	r1, r4
 8006098:	4628      	mov	r0, r5
 800609a:	f000 f8b7 	bl	800620c <_sbrk_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d00a      	beq.n	80060b8 <sbrk_aligned+0x34>
 80060a2:	1cc4      	adds	r4, r0, #3
 80060a4:	f024 0403 	bic.w	r4, r4, #3
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d007      	beq.n	80060bc <sbrk_aligned+0x38>
 80060ac:	1a21      	subs	r1, r4, r0
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f8ac 	bl	800620c <_sbrk_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d101      	bne.n	80060bc <sbrk_aligned+0x38>
 80060b8:	f04f 34ff 	mov.w	r4, #4294967295
 80060bc:	4620      	mov	r0, r4
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	2000062c 	.word	0x2000062c

080060c4 <_malloc_r>:
 80060c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	1ccd      	adds	r5, r1, #3
 80060ca:	f025 0503 	bic.w	r5, r5, #3
 80060ce:	3508      	adds	r5, #8
 80060d0:	2d0c      	cmp	r5, #12
 80060d2:	bf38      	it	cc
 80060d4:	250c      	movcc	r5, #12
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	4607      	mov	r7, r0
 80060da:	db01      	blt.n	80060e0 <_malloc_r+0x1c>
 80060dc:	42a9      	cmp	r1, r5
 80060de:	d905      	bls.n	80060ec <_malloc_r+0x28>
 80060e0:	230c      	movs	r3, #12
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	2600      	movs	r6, #0
 80060e6:	4630      	mov	r0, r6
 80060e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ec:	4e2e      	ldr	r6, [pc, #184]	; (80061a8 <_malloc_r+0xe4>)
 80060ee:	f000 f89d 	bl	800622c <__malloc_lock>
 80060f2:	6833      	ldr	r3, [r6, #0]
 80060f4:	461c      	mov	r4, r3
 80060f6:	bb34      	cbnz	r4, 8006146 <_malloc_r+0x82>
 80060f8:	4629      	mov	r1, r5
 80060fa:	4638      	mov	r0, r7
 80060fc:	f7ff ffc2 	bl	8006084 <sbrk_aligned>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	4604      	mov	r4, r0
 8006104:	d14d      	bne.n	80061a2 <_malloc_r+0xde>
 8006106:	6834      	ldr	r4, [r6, #0]
 8006108:	4626      	mov	r6, r4
 800610a:	2e00      	cmp	r6, #0
 800610c:	d140      	bne.n	8006190 <_malloc_r+0xcc>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	4631      	mov	r1, r6
 8006112:	4638      	mov	r0, r7
 8006114:	eb04 0803 	add.w	r8, r4, r3
 8006118:	f000 f878 	bl	800620c <_sbrk_r>
 800611c:	4580      	cmp	r8, r0
 800611e:	d13a      	bne.n	8006196 <_malloc_r+0xd2>
 8006120:	6821      	ldr	r1, [r4, #0]
 8006122:	3503      	adds	r5, #3
 8006124:	1a6d      	subs	r5, r5, r1
 8006126:	f025 0503 	bic.w	r5, r5, #3
 800612a:	3508      	adds	r5, #8
 800612c:	2d0c      	cmp	r5, #12
 800612e:	bf38      	it	cc
 8006130:	250c      	movcc	r5, #12
 8006132:	4629      	mov	r1, r5
 8006134:	4638      	mov	r0, r7
 8006136:	f7ff ffa5 	bl	8006084 <sbrk_aligned>
 800613a:	3001      	adds	r0, #1
 800613c:	d02b      	beq.n	8006196 <_malloc_r+0xd2>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	442b      	add	r3, r5
 8006142:	6023      	str	r3, [r4, #0]
 8006144:	e00e      	b.n	8006164 <_malloc_r+0xa0>
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	1b52      	subs	r2, r2, r5
 800614a:	d41e      	bmi.n	800618a <_malloc_r+0xc6>
 800614c:	2a0b      	cmp	r2, #11
 800614e:	d916      	bls.n	800617e <_malloc_r+0xba>
 8006150:	1961      	adds	r1, r4, r5
 8006152:	42a3      	cmp	r3, r4
 8006154:	6025      	str	r5, [r4, #0]
 8006156:	bf18      	it	ne
 8006158:	6059      	strne	r1, [r3, #4]
 800615a:	6863      	ldr	r3, [r4, #4]
 800615c:	bf08      	it	eq
 800615e:	6031      	streq	r1, [r6, #0]
 8006160:	5162      	str	r2, [r4, r5]
 8006162:	604b      	str	r3, [r1, #4]
 8006164:	4638      	mov	r0, r7
 8006166:	f104 060b 	add.w	r6, r4, #11
 800616a:	f000 f865 	bl	8006238 <__malloc_unlock>
 800616e:	f026 0607 	bic.w	r6, r6, #7
 8006172:	1d23      	adds	r3, r4, #4
 8006174:	1af2      	subs	r2, r6, r3
 8006176:	d0b6      	beq.n	80060e6 <_malloc_r+0x22>
 8006178:	1b9b      	subs	r3, r3, r6
 800617a:	50a3      	str	r3, [r4, r2]
 800617c:	e7b3      	b.n	80060e6 <_malloc_r+0x22>
 800617e:	6862      	ldr	r2, [r4, #4]
 8006180:	42a3      	cmp	r3, r4
 8006182:	bf0c      	ite	eq
 8006184:	6032      	streq	r2, [r6, #0]
 8006186:	605a      	strne	r2, [r3, #4]
 8006188:	e7ec      	b.n	8006164 <_malloc_r+0xa0>
 800618a:	4623      	mov	r3, r4
 800618c:	6864      	ldr	r4, [r4, #4]
 800618e:	e7b2      	b.n	80060f6 <_malloc_r+0x32>
 8006190:	4634      	mov	r4, r6
 8006192:	6876      	ldr	r6, [r6, #4]
 8006194:	e7b9      	b.n	800610a <_malloc_r+0x46>
 8006196:	230c      	movs	r3, #12
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4638      	mov	r0, r7
 800619c:	f000 f84c 	bl	8006238 <__malloc_unlock>
 80061a0:	e7a1      	b.n	80060e6 <_malloc_r+0x22>
 80061a2:	6025      	str	r5, [r4, #0]
 80061a4:	e7de      	b.n	8006164 <_malloc_r+0xa0>
 80061a6:	bf00      	nop
 80061a8:	20000628 	.word	0x20000628

080061ac <_realloc_r>:
 80061ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b0:	4680      	mov	r8, r0
 80061b2:	4614      	mov	r4, r2
 80061b4:	460e      	mov	r6, r1
 80061b6:	b921      	cbnz	r1, 80061c2 <_realloc_r+0x16>
 80061b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	4611      	mov	r1, r2
 80061be:	f7ff bf81 	b.w	80060c4 <_malloc_r>
 80061c2:	b92a      	cbnz	r2, 80061d0 <_realloc_r+0x24>
 80061c4:	f7ff ff12 	bl	8005fec <_free_r>
 80061c8:	4625      	mov	r5, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d0:	f000 f838 	bl	8006244 <_malloc_usable_size_r>
 80061d4:	4284      	cmp	r4, r0
 80061d6:	4607      	mov	r7, r0
 80061d8:	d802      	bhi.n	80061e0 <_realloc_r+0x34>
 80061da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061de:	d812      	bhi.n	8006206 <_realloc_r+0x5a>
 80061e0:	4621      	mov	r1, r4
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7ff ff6e 	bl	80060c4 <_malloc_r>
 80061e8:	4605      	mov	r5, r0
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d0ed      	beq.n	80061ca <_realloc_r+0x1e>
 80061ee:	42bc      	cmp	r4, r7
 80061f0:	4622      	mov	r2, r4
 80061f2:	4631      	mov	r1, r6
 80061f4:	bf28      	it	cs
 80061f6:	463a      	movcs	r2, r7
 80061f8:	f7ff fed0 	bl	8005f9c <memcpy>
 80061fc:	4631      	mov	r1, r6
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fef4 	bl	8005fec <_free_r>
 8006204:	e7e1      	b.n	80061ca <_realloc_r+0x1e>
 8006206:	4635      	mov	r5, r6
 8006208:	e7df      	b.n	80061ca <_realloc_r+0x1e>
	...

0800620c <_sbrk_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4d06      	ldr	r5, [pc, #24]	; (8006228 <_sbrk_r+0x1c>)
 8006210:	2300      	movs	r3, #0
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	f7fb f938 	bl	800148c <_sbrk>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_sbrk_r+0x1a>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_sbrk_r+0x1a>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20000630 	.word	0x20000630

0800622c <__malloc_lock>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__malloc_lock+0x8>)
 800622e:	f000 b811 	b.w	8006254 <__retarget_lock_acquire_recursive>
 8006232:	bf00      	nop
 8006234:	20000634 	.word	0x20000634

08006238 <__malloc_unlock>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__malloc_unlock+0x8>)
 800623a:	f000 b80c 	b.w	8006256 <__retarget_lock_release_recursive>
 800623e:	bf00      	nop
 8006240:	20000634 	.word	0x20000634

08006244 <_malloc_usable_size_r>:
 8006244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006248:	1f18      	subs	r0, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfbc      	itt	lt
 800624e:	580b      	ldrlt	r3, [r1, r0]
 8006250:	18c0      	addlt	r0, r0, r3
 8006252:	4770      	bx	lr

08006254 <__retarget_lock_acquire_recursive>:
 8006254:	4770      	bx	lr

08006256 <__retarget_lock_release_recursive>:
 8006256:	4770      	bx	lr

08006258 <_init>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr

08006264 <_fini>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr
